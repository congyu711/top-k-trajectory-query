syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.grpc.examples.helloworld.CS1";
option java_outer_classname = "CS1GreeterProto";
option objc_class_prefix = "HLW";

import "google/protobuf/empty.proto"; // 需要处理

package CS1;

service QUCS1_Greeter {
  // 请求加密公钥
  rpc PublicKey (PublicKeyRequest) returns (PublicKeyReply) {}

  // 回复相似轨迹
  rpc QUSearch (QURequest) returns (QUReply) {}

  rpc SeedMessage (msg) returns (google.protobuf.Empty) {}

  rpc SeedConversionKey (conversion_key) returns (google.protobuf.Empty) {}
}

message conversion_key {
  string key = 1;
  enc_id  encryptedID = 2;
}

message  track{
  double  time =1;
  string  hil = 2;
}
message encoding{
  repeated  track encoded = 1;
}
message Capsule{
  string x1 =1;
  string x2 =2;
  string x3 =3;
}
message enc_id{
  //encrypted identity
  repeated bytes enc_val =1;
  Capsule  very_val =2;
}


message  msg{
  message table_val{
    repeated string  table_content =1;
  }
  map<string, table_val>  mapping_table = 1;
  repeated  encoding  encodingList  =2;
}

// QU向CS1请求公钥
message PublicKeyRequest {
  string name = 1;//QU发送自己的公钥
}

// 发送相似数k与加密后的编码轨迹
message QURequest {
  uint32 k = 1;
  message qu_Enc {
    double t = 2;
    bytes Hpoint = 3;
  }
  repeated qu_Enc qu_Encs = 4;
}

//CS1向QU回复公钥（Integer）
message PublicKeyReply {
  string message = 1;//CS1回复自己的公钥
}

message QUReply {
  message Cap {
    string E = 1;
    string V = 2;
    string s = 3;
  }
  message Enc_Result {
    repeated QURequest.qu_Enc query_result = 1;
  }
  Cap cap = 2;
  repeated bytes kid = 3;
  repeated Enc_Result Enc_Results = 4;
  repeated double D = 5;
}