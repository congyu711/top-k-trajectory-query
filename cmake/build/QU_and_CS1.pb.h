// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: QU_and_CS1.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_QU_5fand_5fCS1_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_QU_5fand_5fCS1_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_QU_5fand_5fCS1_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_QU_5fand_5fCS1_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_QU_5fand_5fCS1_2eproto;
namespace QU_and_CS1 {
class PublicKeyReply;
struct PublicKeyReplyDefaultTypeInternal;
extern PublicKeyReplyDefaultTypeInternal _PublicKeyReply_default_instance_;
class PublicKeyRequest;
struct PublicKeyRequestDefaultTypeInternal;
extern PublicKeyRequestDefaultTypeInternal _PublicKeyRequest_default_instance_;
class QUReply;
struct QUReplyDefaultTypeInternal;
extern QUReplyDefaultTypeInternal _QUReply_default_instance_;
class QUReply_Cap;
struct QUReply_CapDefaultTypeInternal;
extern QUReply_CapDefaultTypeInternal _QUReply_Cap_default_instance_;
class QUReply_Enc_Result;
struct QUReply_Enc_ResultDefaultTypeInternal;
extern QUReply_Enc_ResultDefaultTypeInternal _QUReply_Enc_Result_default_instance_;
class QURequest;
struct QURequestDefaultTypeInternal;
extern QURequestDefaultTypeInternal _QURequest_default_instance_;
class QURequest_qu_Enc;
struct QURequest_qu_EncDefaultTypeInternal;
extern QURequest_qu_EncDefaultTypeInternal _QURequest_qu_Enc_default_instance_;
}  // namespace QU_and_CS1
PROTOBUF_NAMESPACE_OPEN
template<> ::QU_and_CS1::PublicKeyReply* Arena::CreateMaybeMessage<::QU_and_CS1::PublicKeyReply>(Arena*);
template<> ::QU_and_CS1::PublicKeyRequest* Arena::CreateMaybeMessage<::QU_and_CS1::PublicKeyRequest>(Arena*);
template<> ::QU_and_CS1::QUReply* Arena::CreateMaybeMessage<::QU_and_CS1::QUReply>(Arena*);
template<> ::QU_and_CS1::QUReply_Cap* Arena::CreateMaybeMessage<::QU_and_CS1::QUReply_Cap>(Arena*);
template<> ::QU_and_CS1::QUReply_Enc_Result* Arena::CreateMaybeMessage<::QU_and_CS1::QUReply_Enc_Result>(Arena*);
template<> ::QU_and_CS1::QURequest* Arena::CreateMaybeMessage<::QU_and_CS1::QURequest>(Arena*);
template<> ::QU_and_CS1::QURequest_qu_Enc* Arena::CreateMaybeMessage<::QU_and_CS1::QURequest_qu_Enc>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace QU_and_CS1 {

// ===================================================================

class PublicKeyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:QU_and_CS1.PublicKeyRequest) */ {
 public:
  inline PublicKeyRequest() : PublicKeyRequest(nullptr) {}
  ~PublicKeyRequest() override;
  explicit PROTOBUF_CONSTEXPR PublicKeyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublicKeyRequest(const PublicKeyRequest& from);
  PublicKeyRequest(PublicKeyRequest&& from) noexcept
    : PublicKeyRequest() {
    *this = ::std::move(from);
  }

  inline PublicKeyRequest& operator=(const PublicKeyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublicKeyRequest& operator=(PublicKeyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublicKeyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublicKeyRequest* internal_default_instance() {
    return reinterpret_cast<const PublicKeyRequest*>(
               &_PublicKeyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PublicKeyRequest& a, PublicKeyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PublicKeyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublicKeyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublicKeyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublicKeyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PublicKeyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PublicKeyRequest& from) {
    PublicKeyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublicKeyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "QU_and_CS1.PublicKeyRequest";
  }
  protected:
  explicit PublicKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:QU_and_CS1.PublicKeyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_QU_5fand_5fCS1_2eproto;
};
// -------------------------------------------------------------------

class QURequest_qu_Enc final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:QU_and_CS1.QURequest.qu_Enc) */ {
 public:
  inline QURequest_qu_Enc() : QURequest_qu_Enc(nullptr) {}
  ~QURequest_qu_Enc() override;
  explicit PROTOBUF_CONSTEXPR QURequest_qu_Enc(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QURequest_qu_Enc(const QURequest_qu_Enc& from);
  QURequest_qu_Enc(QURequest_qu_Enc&& from) noexcept
    : QURequest_qu_Enc() {
    *this = ::std::move(from);
  }

  inline QURequest_qu_Enc& operator=(const QURequest_qu_Enc& from) {
    CopyFrom(from);
    return *this;
  }
  inline QURequest_qu_Enc& operator=(QURequest_qu_Enc&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QURequest_qu_Enc& default_instance() {
    return *internal_default_instance();
  }
  static inline const QURequest_qu_Enc* internal_default_instance() {
    return reinterpret_cast<const QURequest_qu_Enc*>(
               &_QURequest_qu_Enc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(QURequest_qu_Enc& a, QURequest_qu_Enc& b) {
    a.Swap(&b);
  }
  inline void Swap(QURequest_qu_Enc* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QURequest_qu_Enc* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QURequest_qu_Enc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QURequest_qu_Enc>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QURequest_qu_Enc& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QURequest_qu_Enc& from) {
    QURequest_qu_Enc::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QURequest_qu_Enc* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "QU_and_CS1.QURequest.qu_Enc";
  }
  protected:
  explicit QURequest_qu_Enc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHpointFieldNumber = 3,
    kTFieldNumber = 2,
  };
  // string Hpoint = 3;
  void clear_hpoint();
  const std::string& hpoint() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hpoint(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hpoint();
  PROTOBUF_NODISCARD std::string* release_hpoint();
  void set_allocated_hpoint(std::string* hpoint);
  private:
  const std::string& _internal_hpoint() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hpoint(const std::string& value);
  std::string* _internal_mutable_hpoint();
  public:

  // double t = 2;
  void clear_t();
  double t() const;
  void set_t(double value);
  private:
  double _internal_t() const;
  void _internal_set_t(double value);
  public:

  // @@protoc_insertion_point(class_scope:QU_and_CS1.QURequest.qu_Enc)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hpoint_;
    double t_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_QU_5fand_5fCS1_2eproto;
};
// -------------------------------------------------------------------

class QURequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:QU_and_CS1.QURequest) */ {
 public:
  inline QURequest() : QURequest(nullptr) {}
  ~QURequest() override;
  explicit PROTOBUF_CONSTEXPR QURequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QURequest(const QURequest& from);
  QURequest(QURequest&& from) noexcept
    : QURequest() {
    *this = ::std::move(from);
  }

  inline QURequest& operator=(const QURequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QURequest& operator=(QURequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QURequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QURequest* internal_default_instance() {
    return reinterpret_cast<const QURequest*>(
               &_QURequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(QURequest& a, QURequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QURequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QURequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QURequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QURequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QURequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QURequest& from) {
    QURequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QURequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "QU_and_CS1.QURequest";
  }
  protected:
  explicit QURequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef QURequest_qu_Enc qu_Enc;

  // accessors -------------------------------------------------------

  enum : int {
    kQuEncsFieldNumber = 4,
    kKFieldNumber = 1,
  };
  // repeated .QU_and_CS1.QURequest.qu_Enc qu_Encs = 4;
  int qu_encs_size() const;
  private:
  int _internal_qu_encs_size() const;
  public:
  void clear_qu_encs();
  ::QU_and_CS1::QURequest_qu_Enc* mutable_qu_encs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::QU_and_CS1::QURequest_qu_Enc >*
      mutable_qu_encs();
  private:
  const ::QU_and_CS1::QURequest_qu_Enc& _internal_qu_encs(int index) const;
  ::QU_and_CS1::QURequest_qu_Enc* _internal_add_qu_encs();
  public:
  const ::QU_and_CS1::QURequest_qu_Enc& qu_encs(int index) const;
  ::QU_and_CS1::QURequest_qu_Enc* add_qu_encs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::QU_and_CS1::QURequest_qu_Enc >&
      qu_encs() const;

  // uint32 k = 1;
  void clear_k();
  uint32_t k() const;
  void set_k(uint32_t value);
  private:
  uint32_t _internal_k() const;
  void _internal_set_k(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:QU_and_CS1.QURequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::QU_and_CS1::QURequest_qu_Enc > qu_encs_;
    uint32_t k_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_QU_5fand_5fCS1_2eproto;
};
// -------------------------------------------------------------------

class PublicKeyReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:QU_and_CS1.PublicKeyReply) */ {
 public:
  inline PublicKeyReply() : PublicKeyReply(nullptr) {}
  ~PublicKeyReply() override;
  explicit PROTOBUF_CONSTEXPR PublicKeyReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublicKeyReply(const PublicKeyReply& from);
  PublicKeyReply(PublicKeyReply&& from) noexcept
    : PublicKeyReply() {
    *this = ::std::move(from);
  }

  inline PublicKeyReply& operator=(const PublicKeyReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublicKeyReply& operator=(PublicKeyReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublicKeyReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublicKeyReply* internal_default_instance() {
    return reinterpret_cast<const PublicKeyReply*>(
               &_PublicKeyReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PublicKeyReply& a, PublicKeyReply& b) {
    a.Swap(&b);
  }
  inline void Swap(PublicKeyReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublicKeyReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublicKeyReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublicKeyReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PublicKeyReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PublicKeyReply& from) {
    PublicKeyReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublicKeyReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "QU_and_CS1.PublicKeyReply";
  }
  protected:
  explicit PublicKeyReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:QU_and_CS1.PublicKeyReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_QU_5fand_5fCS1_2eproto;
};
// -------------------------------------------------------------------

class QUReply_Cap final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:QU_and_CS1.QUReply.Cap) */ {
 public:
  inline QUReply_Cap() : QUReply_Cap(nullptr) {}
  ~QUReply_Cap() override;
  explicit PROTOBUF_CONSTEXPR QUReply_Cap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QUReply_Cap(const QUReply_Cap& from);
  QUReply_Cap(QUReply_Cap&& from) noexcept
    : QUReply_Cap() {
    *this = ::std::move(from);
  }

  inline QUReply_Cap& operator=(const QUReply_Cap& from) {
    CopyFrom(from);
    return *this;
  }
  inline QUReply_Cap& operator=(QUReply_Cap&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QUReply_Cap& default_instance() {
    return *internal_default_instance();
  }
  static inline const QUReply_Cap* internal_default_instance() {
    return reinterpret_cast<const QUReply_Cap*>(
               &_QUReply_Cap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(QUReply_Cap& a, QUReply_Cap& b) {
    a.Swap(&b);
  }
  inline void Swap(QUReply_Cap* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QUReply_Cap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QUReply_Cap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QUReply_Cap>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QUReply_Cap& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QUReply_Cap& from) {
    QUReply_Cap::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QUReply_Cap* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "QU_and_CS1.QUReply.Cap";
  }
  protected:
  explicit QUReply_Cap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEFieldNumber = 1,
    kVFieldNumber = 2,
    kSFieldNumber = 3,
  };
  // string E = 1;
  void clear_e();
  const std::string& e() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_e(ArgT0&& arg0, ArgT... args);
  std::string* mutable_e();
  PROTOBUF_NODISCARD std::string* release_e();
  void set_allocated_e(std::string* e);
  private:
  const std::string& _internal_e() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_e(const std::string& value);
  std::string* _internal_mutable_e();
  public:

  // string V = 2;
  void clear_v();
  const std::string& v() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_v(ArgT0&& arg0, ArgT... args);
  std::string* mutable_v();
  PROTOBUF_NODISCARD std::string* release_v();
  void set_allocated_v(std::string* v);
  private:
  const std::string& _internal_v() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_v(const std::string& value);
  std::string* _internal_mutable_v();
  public:

  // string s = 3;
  void clear_s();
  const std::string& s() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_s(ArgT0&& arg0, ArgT... args);
  std::string* mutable_s();
  PROTOBUF_NODISCARD std::string* release_s();
  void set_allocated_s(std::string* s);
  private:
  const std::string& _internal_s() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_s(const std::string& value);
  std::string* _internal_mutable_s();
  public:

  // @@protoc_insertion_point(class_scope:QU_and_CS1.QUReply.Cap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr e_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr v_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr s_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_QU_5fand_5fCS1_2eproto;
};
// -------------------------------------------------------------------

class QUReply_Enc_Result final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:QU_and_CS1.QUReply.Enc_Result) */ {
 public:
  inline QUReply_Enc_Result() : QUReply_Enc_Result(nullptr) {}
  ~QUReply_Enc_Result() override;
  explicit PROTOBUF_CONSTEXPR QUReply_Enc_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QUReply_Enc_Result(const QUReply_Enc_Result& from);
  QUReply_Enc_Result(QUReply_Enc_Result&& from) noexcept
    : QUReply_Enc_Result() {
    *this = ::std::move(from);
  }

  inline QUReply_Enc_Result& operator=(const QUReply_Enc_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline QUReply_Enc_Result& operator=(QUReply_Enc_Result&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QUReply_Enc_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const QUReply_Enc_Result* internal_default_instance() {
    return reinterpret_cast<const QUReply_Enc_Result*>(
               &_QUReply_Enc_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(QUReply_Enc_Result& a, QUReply_Enc_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(QUReply_Enc_Result* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QUReply_Enc_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QUReply_Enc_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QUReply_Enc_Result>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QUReply_Enc_Result& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QUReply_Enc_Result& from) {
    QUReply_Enc_Result::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QUReply_Enc_Result* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "QU_and_CS1.QUReply.Enc_Result";
  }
  protected:
  explicit QUReply_Enc_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryResultFieldNumber = 1,
  };
  // repeated .QU_and_CS1.QURequest.qu_Enc query_result = 1;
  int query_result_size() const;
  private:
  int _internal_query_result_size() const;
  public:
  void clear_query_result();
  ::QU_and_CS1::QURequest_qu_Enc* mutable_query_result(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::QU_and_CS1::QURequest_qu_Enc >*
      mutable_query_result();
  private:
  const ::QU_and_CS1::QURequest_qu_Enc& _internal_query_result(int index) const;
  ::QU_and_CS1::QURequest_qu_Enc* _internal_add_query_result();
  public:
  const ::QU_and_CS1::QURequest_qu_Enc& query_result(int index) const;
  ::QU_and_CS1::QURequest_qu_Enc* add_query_result();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::QU_and_CS1::QURequest_qu_Enc >&
      query_result() const;

  // @@protoc_insertion_point(class_scope:QU_and_CS1.QUReply.Enc_Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::QU_and_CS1::QURequest_qu_Enc > query_result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_QU_5fand_5fCS1_2eproto;
};
// -------------------------------------------------------------------

class QUReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:QU_and_CS1.QUReply) */ {
 public:
  inline QUReply() : QUReply(nullptr) {}
  ~QUReply() override;
  explicit PROTOBUF_CONSTEXPR QUReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QUReply(const QUReply& from);
  QUReply(QUReply&& from) noexcept
    : QUReply() {
    *this = ::std::move(from);
  }

  inline QUReply& operator=(const QUReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline QUReply& operator=(QUReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QUReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const QUReply* internal_default_instance() {
    return reinterpret_cast<const QUReply*>(
               &_QUReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(QUReply& a, QUReply& b) {
    a.Swap(&b);
  }
  inline void Swap(QUReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QUReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QUReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QUReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QUReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QUReply& from) {
    QUReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QUReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "QU_and_CS1.QUReply";
  }
  protected:
  explicit QUReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef QUReply_Cap Cap;
  typedef QUReply_Enc_Result Enc_Result;

  // accessors -------------------------------------------------------

  enum : int {
    kKidFieldNumber = 3,
    kEncResultsFieldNumber = 4,
    kDFieldNumber = 5,
    kComversionKeyFieldNumber = 1,
    kCapFieldNumber = 2,
  };
  // repeated string kid = 3;
  int kid_size() const;
  private:
  int _internal_kid_size() const;
  public:
  void clear_kid();
  const std::string& kid(int index) const;
  std::string* mutable_kid(int index);
  void set_kid(int index, const std::string& value);
  void set_kid(int index, std::string&& value);
  void set_kid(int index, const char* value);
  void set_kid(int index, const char* value, size_t size);
  std::string* add_kid();
  void add_kid(const std::string& value);
  void add_kid(std::string&& value);
  void add_kid(const char* value);
  void add_kid(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& kid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_kid();
  private:
  const std::string& _internal_kid(int index) const;
  std::string* _internal_add_kid();
  public:

  // repeated .QU_and_CS1.QUReply.Enc_Result Enc_Results = 4;
  int enc_results_size() const;
  private:
  int _internal_enc_results_size() const;
  public:
  void clear_enc_results();
  ::QU_and_CS1::QUReply_Enc_Result* mutable_enc_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::QU_and_CS1::QUReply_Enc_Result >*
      mutable_enc_results();
  private:
  const ::QU_and_CS1::QUReply_Enc_Result& _internal_enc_results(int index) const;
  ::QU_and_CS1::QUReply_Enc_Result* _internal_add_enc_results();
  public:
  const ::QU_and_CS1::QUReply_Enc_Result& enc_results(int index) const;
  ::QU_and_CS1::QUReply_Enc_Result* add_enc_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::QU_and_CS1::QUReply_Enc_Result >&
      enc_results() const;

  // repeated double D = 5;
  int d_size() const;
  private:
  int _internal_d_size() const;
  public:
  void clear_d();
  private:
  double _internal_d(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_d() const;
  void _internal_add_d(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_d();
  public:
  double d(int index) const;
  void set_d(int index, double value);
  void add_d(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      d() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_d();

  // string comversionKey = 1;
  void clear_comversionkey();
  const std::string& comversionkey() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_comversionkey(ArgT0&& arg0, ArgT... args);
  std::string* mutable_comversionkey();
  PROTOBUF_NODISCARD std::string* release_comversionkey();
  void set_allocated_comversionkey(std::string* comversionkey);
  private:
  const std::string& _internal_comversionkey() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_comversionkey(const std::string& value);
  std::string* _internal_mutable_comversionkey();
  public:

  // .QU_and_CS1.QUReply.Cap cap = 2;
  bool has_cap() const;
  private:
  bool _internal_has_cap() const;
  public:
  void clear_cap();
  const ::QU_and_CS1::QUReply_Cap& cap() const;
  PROTOBUF_NODISCARD ::QU_and_CS1::QUReply_Cap* release_cap();
  ::QU_and_CS1::QUReply_Cap* mutable_cap();
  void set_allocated_cap(::QU_and_CS1::QUReply_Cap* cap);
  private:
  const ::QU_and_CS1::QUReply_Cap& _internal_cap() const;
  ::QU_and_CS1::QUReply_Cap* _internal_mutable_cap();
  public:
  void unsafe_arena_set_allocated_cap(
      ::QU_and_CS1::QUReply_Cap* cap);
  ::QU_and_CS1::QUReply_Cap* unsafe_arena_release_cap();

  // @@protoc_insertion_point(class_scope:QU_and_CS1.QUReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> kid_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::QU_and_CS1::QUReply_Enc_Result > enc_results_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > d_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comversionkey_;
    ::QU_and_CS1::QUReply_Cap* cap_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_QU_5fand_5fCS1_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PublicKeyRequest

// string name = 1;
inline void PublicKeyRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& PublicKeyRequest::name() const {
  // @@protoc_insertion_point(field_get:QU_and_CS1.PublicKeyRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PublicKeyRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:QU_and_CS1.PublicKeyRequest.name)
}
inline std::string* PublicKeyRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:QU_and_CS1.PublicKeyRequest.name)
  return _s;
}
inline const std::string& PublicKeyRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void PublicKeyRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* PublicKeyRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* PublicKeyRequest::release_name() {
  // @@protoc_insertion_point(field_release:QU_and_CS1.PublicKeyRequest.name)
  return _impl_.name_.Release();
}
inline void PublicKeyRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:QU_and_CS1.PublicKeyRequest.name)
}

// -------------------------------------------------------------------

// QURequest_qu_Enc

// double t = 2;
inline void QURequest_qu_Enc::clear_t() {
  _impl_.t_ = 0;
}
inline double QURequest_qu_Enc::_internal_t() const {
  return _impl_.t_;
}
inline double QURequest_qu_Enc::t() const {
  // @@protoc_insertion_point(field_get:QU_and_CS1.QURequest.qu_Enc.t)
  return _internal_t();
}
inline void QURequest_qu_Enc::_internal_set_t(double value) {
  
  _impl_.t_ = value;
}
inline void QURequest_qu_Enc::set_t(double value) {
  _internal_set_t(value);
  // @@protoc_insertion_point(field_set:QU_and_CS1.QURequest.qu_Enc.t)
}

// string Hpoint = 3;
inline void QURequest_qu_Enc::clear_hpoint() {
  _impl_.hpoint_.ClearToEmpty();
}
inline const std::string& QURequest_qu_Enc::hpoint() const {
  // @@protoc_insertion_point(field_get:QU_and_CS1.QURequest.qu_Enc.Hpoint)
  return _internal_hpoint();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QURequest_qu_Enc::set_hpoint(ArgT0&& arg0, ArgT... args) {
 
 _impl_.hpoint_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:QU_and_CS1.QURequest.qu_Enc.Hpoint)
}
inline std::string* QURequest_qu_Enc::mutable_hpoint() {
  std::string* _s = _internal_mutable_hpoint();
  // @@protoc_insertion_point(field_mutable:QU_and_CS1.QURequest.qu_Enc.Hpoint)
  return _s;
}
inline const std::string& QURequest_qu_Enc::_internal_hpoint() const {
  return _impl_.hpoint_.Get();
}
inline void QURequest_qu_Enc::_internal_set_hpoint(const std::string& value) {
  
  _impl_.hpoint_.Set(value, GetArenaForAllocation());
}
inline std::string* QURequest_qu_Enc::_internal_mutable_hpoint() {
  
  return _impl_.hpoint_.Mutable(GetArenaForAllocation());
}
inline std::string* QURequest_qu_Enc::release_hpoint() {
  // @@protoc_insertion_point(field_release:QU_and_CS1.QURequest.qu_Enc.Hpoint)
  return _impl_.hpoint_.Release();
}
inline void QURequest_qu_Enc::set_allocated_hpoint(std::string* hpoint) {
  if (hpoint != nullptr) {
    
  } else {
    
  }
  _impl_.hpoint_.SetAllocated(hpoint, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hpoint_.IsDefault()) {
    _impl_.hpoint_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:QU_and_CS1.QURequest.qu_Enc.Hpoint)
}

// -------------------------------------------------------------------

// QURequest

// uint32 k = 1;
inline void QURequest::clear_k() {
  _impl_.k_ = 0u;
}
inline uint32_t QURequest::_internal_k() const {
  return _impl_.k_;
}
inline uint32_t QURequest::k() const {
  // @@protoc_insertion_point(field_get:QU_and_CS1.QURequest.k)
  return _internal_k();
}
inline void QURequest::_internal_set_k(uint32_t value) {
  
  _impl_.k_ = value;
}
inline void QURequest::set_k(uint32_t value) {
  _internal_set_k(value);
  // @@protoc_insertion_point(field_set:QU_and_CS1.QURequest.k)
}

// repeated .QU_and_CS1.QURequest.qu_Enc qu_Encs = 4;
inline int QURequest::_internal_qu_encs_size() const {
  return _impl_.qu_encs_.size();
}
inline int QURequest::qu_encs_size() const {
  return _internal_qu_encs_size();
}
inline void QURequest::clear_qu_encs() {
  _impl_.qu_encs_.Clear();
}
inline ::QU_and_CS1::QURequest_qu_Enc* QURequest::mutable_qu_encs(int index) {
  // @@protoc_insertion_point(field_mutable:QU_and_CS1.QURequest.qu_Encs)
  return _impl_.qu_encs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::QU_and_CS1::QURequest_qu_Enc >*
QURequest::mutable_qu_encs() {
  // @@protoc_insertion_point(field_mutable_list:QU_and_CS1.QURequest.qu_Encs)
  return &_impl_.qu_encs_;
}
inline const ::QU_and_CS1::QURequest_qu_Enc& QURequest::_internal_qu_encs(int index) const {
  return _impl_.qu_encs_.Get(index);
}
inline const ::QU_and_CS1::QURequest_qu_Enc& QURequest::qu_encs(int index) const {
  // @@protoc_insertion_point(field_get:QU_and_CS1.QURequest.qu_Encs)
  return _internal_qu_encs(index);
}
inline ::QU_and_CS1::QURequest_qu_Enc* QURequest::_internal_add_qu_encs() {
  return _impl_.qu_encs_.Add();
}
inline ::QU_and_CS1::QURequest_qu_Enc* QURequest::add_qu_encs() {
  ::QU_and_CS1::QURequest_qu_Enc* _add = _internal_add_qu_encs();
  // @@protoc_insertion_point(field_add:QU_and_CS1.QURequest.qu_Encs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::QU_and_CS1::QURequest_qu_Enc >&
QURequest::qu_encs() const {
  // @@protoc_insertion_point(field_list:QU_and_CS1.QURequest.qu_Encs)
  return _impl_.qu_encs_;
}

// -------------------------------------------------------------------

// PublicKeyReply

// string message = 1;
inline void PublicKeyReply::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& PublicKeyReply::message() const {
  // @@protoc_insertion_point(field_get:QU_and_CS1.PublicKeyReply.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PublicKeyReply::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:QU_and_CS1.PublicKeyReply.message)
}
inline std::string* PublicKeyReply::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:QU_and_CS1.PublicKeyReply.message)
  return _s;
}
inline const std::string& PublicKeyReply::_internal_message() const {
  return _impl_.message_.Get();
}
inline void PublicKeyReply::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* PublicKeyReply::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* PublicKeyReply::release_message() {
  // @@protoc_insertion_point(field_release:QU_and_CS1.PublicKeyReply.message)
  return _impl_.message_.Release();
}
inline void PublicKeyReply::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:QU_and_CS1.PublicKeyReply.message)
}

// -------------------------------------------------------------------

// QUReply_Cap

// string E = 1;
inline void QUReply_Cap::clear_e() {
  _impl_.e_.ClearToEmpty();
}
inline const std::string& QUReply_Cap::e() const {
  // @@protoc_insertion_point(field_get:QU_and_CS1.QUReply.Cap.E)
  return _internal_e();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QUReply_Cap::set_e(ArgT0&& arg0, ArgT... args) {
 
 _impl_.e_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:QU_and_CS1.QUReply.Cap.E)
}
inline std::string* QUReply_Cap::mutable_e() {
  std::string* _s = _internal_mutable_e();
  // @@protoc_insertion_point(field_mutable:QU_and_CS1.QUReply.Cap.E)
  return _s;
}
inline const std::string& QUReply_Cap::_internal_e() const {
  return _impl_.e_.Get();
}
inline void QUReply_Cap::_internal_set_e(const std::string& value) {
  
  _impl_.e_.Set(value, GetArenaForAllocation());
}
inline std::string* QUReply_Cap::_internal_mutable_e() {
  
  return _impl_.e_.Mutable(GetArenaForAllocation());
}
inline std::string* QUReply_Cap::release_e() {
  // @@protoc_insertion_point(field_release:QU_and_CS1.QUReply.Cap.E)
  return _impl_.e_.Release();
}
inline void QUReply_Cap::set_allocated_e(std::string* e) {
  if (e != nullptr) {
    
  } else {
    
  }
  _impl_.e_.SetAllocated(e, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.e_.IsDefault()) {
    _impl_.e_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:QU_and_CS1.QUReply.Cap.E)
}

// string V = 2;
inline void QUReply_Cap::clear_v() {
  _impl_.v_.ClearToEmpty();
}
inline const std::string& QUReply_Cap::v() const {
  // @@protoc_insertion_point(field_get:QU_and_CS1.QUReply.Cap.V)
  return _internal_v();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QUReply_Cap::set_v(ArgT0&& arg0, ArgT... args) {
 
 _impl_.v_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:QU_and_CS1.QUReply.Cap.V)
}
inline std::string* QUReply_Cap::mutable_v() {
  std::string* _s = _internal_mutable_v();
  // @@protoc_insertion_point(field_mutable:QU_and_CS1.QUReply.Cap.V)
  return _s;
}
inline const std::string& QUReply_Cap::_internal_v() const {
  return _impl_.v_.Get();
}
inline void QUReply_Cap::_internal_set_v(const std::string& value) {
  
  _impl_.v_.Set(value, GetArenaForAllocation());
}
inline std::string* QUReply_Cap::_internal_mutable_v() {
  
  return _impl_.v_.Mutable(GetArenaForAllocation());
}
inline std::string* QUReply_Cap::release_v() {
  // @@protoc_insertion_point(field_release:QU_and_CS1.QUReply.Cap.V)
  return _impl_.v_.Release();
}
inline void QUReply_Cap::set_allocated_v(std::string* v) {
  if (v != nullptr) {
    
  } else {
    
  }
  _impl_.v_.SetAllocated(v, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.v_.IsDefault()) {
    _impl_.v_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:QU_and_CS1.QUReply.Cap.V)
}

// string s = 3;
inline void QUReply_Cap::clear_s() {
  _impl_.s_.ClearToEmpty();
}
inline const std::string& QUReply_Cap::s() const {
  // @@protoc_insertion_point(field_get:QU_and_CS1.QUReply.Cap.s)
  return _internal_s();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QUReply_Cap::set_s(ArgT0&& arg0, ArgT... args) {
 
 _impl_.s_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:QU_and_CS1.QUReply.Cap.s)
}
inline std::string* QUReply_Cap::mutable_s() {
  std::string* _s = _internal_mutable_s();
  // @@protoc_insertion_point(field_mutable:QU_and_CS1.QUReply.Cap.s)
  return _s;
}
inline const std::string& QUReply_Cap::_internal_s() const {
  return _impl_.s_.Get();
}
inline void QUReply_Cap::_internal_set_s(const std::string& value) {
  
  _impl_.s_.Set(value, GetArenaForAllocation());
}
inline std::string* QUReply_Cap::_internal_mutable_s() {
  
  return _impl_.s_.Mutable(GetArenaForAllocation());
}
inline std::string* QUReply_Cap::release_s() {
  // @@protoc_insertion_point(field_release:QU_and_CS1.QUReply.Cap.s)
  return _impl_.s_.Release();
}
inline void QUReply_Cap::set_allocated_s(std::string* s) {
  if (s != nullptr) {
    
  } else {
    
  }
  _impl_.s_.SetAllocated(s, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.s_.IsDefault()) {
    _impl_.s_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:QU_and_CS1.QUReply.Cap.s)
}

// -------------------------------------------------------------------

// QUReply_Enc_Result

// repeated .QU_and_CS1.QURequest.qu_Enc query_result = 1;
inline int QUReply_Enc_Result::_internal_query_result_size() const {
  return _impl_.query_result_.size();
}
inline int QUReply_Enc_Result::query_result_size() const {
  return _internal_query_result_size();
}
inline void QUReply_Enc_Result::clear_query_result() {
  _impl_.query_result_.Clear();
}
inline ::QU_and_CS1::QURequest_qu_Enc* QUReply_Enc_Result::mutable_query_result(int index) {
  // @@protoc_insertion_point(field_mutable:QU_and_CS1.QUReply.Enc_Result.query_result)
  return _impl_.query_result_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::QU_and_CS1::QURequest_qu_Enc >*
QUReply_Enc_Result::mutable_query_result() {
  // @@protoc_insertion_point(field_mutable_list:QU_and_CS1.QUReply.Enc_Result.query_result)
  return &_impl_.query_result_;
}
inline const ::QU_and_CS1::QURequest_qu_Enc& QUReply_Enc_Result::_internal_query_result(int index) const {
  return _impl_.query_result_.Get(index);
}
inline const ::QU_and_CS1::QURequest_qu_Enc& QUReply_Enc_Result::query_result(int index) const {
  // @@protoc_insertion_point(field_get:QU_and_CS1.QUReply.Enc_Result.query_result)
  return _internal_query_result(index);
}
inline ::QU_and_CS1::QURequest_qu_Enc* QUReply_Enc_Result::_internal_add_query_result() {
  return _impl_.query_result_.Add();
}
inline ::QU_and_CS1::QURequest_qu_Enc* QUReply_Enc_Result::add_query_result() {
  ::QU_and_CS1::QURequest_qu_Enc* _add = _internal_add_query_result();
  // @@protoc_insertion_point(field_add:QU_and_CS1.QUReply.Enc_Result.query_result)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::QU_and_CS1::QURequest_qu_Enc >&
QUReply_Enc_Result::query_result() const {
  // @@protoc_insertion_point(field_list:QU_and_CS1.QUReply.Enc_Result.query_result)
  return _impl_.query_result_;
}

// -------------------------------------------------------------------

// QUReply

// string comversionKey = 1;
inline void QUReply::clear_comversionkey() {
  _impl_.comversionkey_.ClearToEmpty();
}
inline const std::string& QUReply::comversionkey() const {
  // @@protoc_insertion_point(field_get:QU_and_CS1.QUReply.comversionKey)
  return _internal_comversionkey();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QUReply::set_comversionkey(ArgT0&& arg0, ArgT... args) {
 
 _impl_.comversionkey_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:QU_and_CS1.QUReply.comversionKey)
}
inline std::string* QUReply::mutable_comversionkey() {
  std::string* _s = _internal_mutable_comversionkey();
  // @@protoc_insertion_point(field_mutable:QU_and_CS1.QUReply.comversionKey)
  return _s;
}
inline const std::string& QUReply::_internal_comversionkey() const {
  return _impl_.comversionkey_.Get();
}
inline void QUReply::_internal_set_comversionkey(const std::string& value) {
  
  _impl_.comversionkey_.Set(value, GetArenaForAllocation());
}
inline std::string* QUReply::_internal_mutable_comversionkey() {
  
  return _impl_.comversionkey_.Mutable(GetArenaForAllocation());
}
inline std::string* QUReply::release_comversionkey() {
  // @@protoc_insertion_point(field_release:QU_and_CS1.QUReply.comversionKey)
  return _impl_.comversionkey_.Release();
}
inline void QUReply::set_allocated_comversionkey(std::string* comversionkey) {
  if (comversionkey != nullptr) {
    
  } else {
    
  }
  _impl_.comversionkey_.SetAllocated(comversionkey, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.comversionkey_.IsDefault()) {
    _impl_.comversionkey_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:QU_and_CS1.QUReply.comversionKey)
}

// .QU_and_CS1.QUReply.Cap cap = 2;
inline bool QUReply::_internal_has_cap() const {
  return this != internal_default_instance() && _impl_.cap_ != nullptr;
}
inline bool QUReply::has_cap() const {
  return _internal_has_cap();
}
inline void QUReply::clear_cap() {
  if (GetArenaForAllocation() == nullptr && _impl_.cap_ != nullptr) {
    delete _impl_.cap_;
  }
  _impl_.cap_ = nullptr;
}
inline const ::QU_and_CS1::QUReply_Cap& QUReply::_internal_cap() const {
  const ::QU_and_CS1::QUReply_Cap* p = _impl_.cap_;
  return p != nullptr ? *p : reinterpret_cast<const ::QU_and_CS1::QUReply_Cap&>(
      ::QU_and_CS1::_QUReply_Cap_default_instance_);
}
inline const ::QU_and_CS1::QUReply_Cap& QUReply::cap() const {
  // @@protoc_insertion_point(field_get:QU_and_CS1.QUReply.cap)
  return _internal_cap();
}
inline void QUReply::unsafe_arena_set_allocated_cap(
    ::QU_and_CS1::QUReply_Cap* cap) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cap_);
  }
  _impl_.cap_ = cap;
  if (cap) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:QU_and_CS1.QUReply.cap)
}
inline ::QU_and_CS1::QUReply_Cap* QUReply::release_cap() {
  
  ::QU_and_CS1::QUReply_Cap* temp = _impl_.cap_;
  _impl_.cap_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::QU_and_CS1::QUReply_Cap* QUReply::unsafe_arena_release_cap() {
  // @@protoc_insertion_point(field_release:QU_and_CS1.QUReply.cap)
  
  ::QU_and_CS1::QUReply_Cap* temp = _impl_.cap_;
  _impl_.cap_ = nullptr;
  return temp;
}
inline ::QU_and_CS1::QUReply_Cap* QUReply::_internal_mutable_cap() {
  
  if (_impl_.cap_ == nullptr) {
    auto* p = CreateMaybeMessage<::QU_and_CS1::QUReply_Cap>(GetArenaForAllocation());
    _impl_.cap_ = p;
  }
  return _impl_.cap_;
}
inline ::QU_and_CS1::QUReply_Cap* QUReply::mutable_cap() {
  ::QU_and_CS1::QUReply_Cap* _msg = _internal_mutable_cap();
  // @@protoc_insertion_point(field_mutable:QU_and_CS1.QUReply.cap)
  return _msg;
}
inline void QUReply::set_allocated_cap(::QU_and_CS1::QUReply_Cap* cap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.cap_;
  }
  if (cap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cap);
    if (message_arena != submessage_arena) {
      cap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cap, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.cap_ = cap;
  // @@protoc_insertion_point(field_set_allocated:QU_and_CS1.QUReply.cap)
}

// repeated string kid = 3;
inline int QUReply::_internal_kid_size() const {
  return _impl_.kid_.size();
}
inline int QUReply::kid_size() const {
  return _internal_kid_size();
}
inline void QUReply::clear_kid() {
  _impl_.kid_.Clear();
}
inline std::string* QUReply::add_kid() {
  std::string* _s = _internal_add_kid();
  // @@protoc_insertion_point(field_add_mutable:QU_and_CS1.QUReply.kid)
  return _s;
}
inline const std::string& QUReply::_internal_kid(int index) const {
  return _impl_.kid_.Get(index);
}
inline const std::string& QUReply::kid(int index) const {
  // @@protoc_insertion_point(field_get:QU_and_CS1.QUReply.kid)
  return _internal_kid(index);
}
inline std::string* QUReply::mutable_kid(int index) {
  // @@protoc_insertion_point(field_mutable:QU_and_CS1.QUReply.kid)
  return _impl_.kid_.Mutable(index);
}
inline void QUReply::set_kid(int index, const std::string& value) {
  _impl_.kid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:QU_and_CS1.QUReply.kid)
}
inline void QUReply::set_kid(int index, std::string&& value) {
  _impl_.kid_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:QU_and_CS1.QUReply.kid)
}
inline void QUReply::set_kid(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.kid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:QU_and_CS1.QUReply.kid)
}
inline void QUReply::set_kid(int index, const char* value, size_t size) {
  _impl_.kid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:QU_and_CS1.QUReply.kid)
}
inline std::string* QUReply::_internal_add_kid() {
  return _impl_.kid_.Add();
}
inline void QUReply::add_kid(const std::string& value) {
  _impl_.kid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:QU_and_CS1.QUReply.kid)
}
inline void QUReply::add_kid(std::string&& value) {
  _impl_.kid_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:QU_and_CS1.QUReply.kid)
}
inline void QUReply::add_kid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.kid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:QU_and_CS1.QUReply.kid)
}
inline void QUReply::add_kid(const char* value, size_t size) {
  _impl_.kid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:QU_and_CS1.QUReply.kid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
QUReply::kid() const {
  // @@protoc_insertion_point(field_list:QU_and_CS1.QUReply.kid)
  return _impl_.kid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
QUReply::mutable_kid() {
  // @@protoc_insertion_point(field_mutable_list:QU_and_CS1.QUReply.kid)
  return &_impl_.kid_;
}

// repeated .QU_and_CS1.QUReply.Enc_Result Enc_Results = 4;
inline int QUReply::_internal_enc_results_size() const {
  return _impl_.enc_results_.size();
}
inline int QUReply::enc_results_size() const {
  return _internal_enc_results_size();
}
inline void QUReply::clear_enc_results() {
  _impl_.enc_results_.Clear();
}
inline ::QU_and_CS1::QUReply_Enc_Result* QUReply::mutable_enc_results(int index) {
  // @@protoc_insertion_point(field_mutable:QU_and_CS1.QUReply.Enc_Results)
  return _impl_.enc_results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::QU_and_CS1::QUReply_Enc_Result >*
QUReply::mutable_enc_results() {
  // @@protoc_insertion_point(field_mutable_list:QU_and_CS1.QUReply.Enc_Results)
  return &_impl_.enc_results_;
}
inline const ::QU_and_CS1::QUReply_Enc_Result& QUReply::_internal_enc_results(int index) const {
  return _impl_.enc_results_.Get(index);
}
inline const ::QU_and_CS1::QUReply_Enc_Result& QUReply::enc_results(int index) const {
  // @@protoc_insertion_point(field_get:QU_and_CS1.QUReply.Enc_Results)
  return _internal_enc_results(index);
}
inline ::QU_and_CS1::QUReply_Enc_Result* QUReply::_internal_add_enc_results() {
  return _impl_.enc_results_.Add();
}
inline ::QU_and_CS1::QUReply_Enc_Result* QUReply::add_enc_results() {
  ::QU_and_CS1::QUReply_Enc_Result* _add = _internal_add_enc_results();
  // @@protoc_insertion_point(field_add:QU_and_CS1.QUReply.Enc_Results)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::QU_and_CS1::QUReply_Enc_Result >&
QUReply::enc_results() const {
  // @@protoc_insertion_point(field_list:QU_and_CS1.QUReply.Enc_Results)
  return _impl_.enc_results_;
}

// repeated double D = 5;
inline int QUReply::_internal_d_size() const {
  return _impl_.d_.size();
}
inline int QUReply::d_size() const {
  return _internal_d_size();
}
inline void QUReply::clear_d() {
  _impl_.d_.Clear();
}
inline double QUReply::_internal_d(int index) const {
  return _impl_.d_.Get(index);
}
inline double QUReply::d(int index) const {
  // @@protoc_insertion_point(field_get:QU_and_CS1.QUReply.D)
  return _internal_d(index);
}
inline void QUReply::set_d(int index, double value) {
  _impl_.d_.Set(index, value);
  // @@protoc_insertion_point(field_set:QU_and_CS1.QUReply.D)
}
inline void QUReply::_internal_add_d(double value) {
  _impl_.d_.Add(value);
}
inline void QUReply::add_d(double value) {
  _internal_add_d(value);
  // @@protoc_insertion_point(field_add:QU_and_CS1.QUReply.D)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
QUReply::_internal_d() const {
  return _impl_.d_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
QUReply::d() const {
  // @@protoc_insertion_point(field_list:QU_and_CS1.QUReply.D)
  return _internal_d();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
QUReply::_internal_mutable_d() {
  return &_impl_.d_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
QUReply::mutable_d() {
  // @@protoc_insertion_point(field_mutable_list:QU_and_CS1.QUReply.D)
  return _internal_mutable_d();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace QU_and_CS1

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_QU_5fand_5fCS1_2eproto
