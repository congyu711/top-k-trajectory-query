// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CS1_and_CS2.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_CS1_5fand_5fCS2_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_CS1_5fand_5fCS2_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_CS1_5fand_5fCS2_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_CS1_5fand_5fCS2_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_CS1_5fand_5fCS2_2eproto;
namespace CS1_CS2 {
class ExactResult;
struct ExactResultDefaultTypeInternal;
extern ExactResultDefaultTypeInternal _ExactResult_default_instance_;
class PreResults;
struct PreResultsDefaultTypeInternal;
extern PreResultsDefaultTypeInternal _PreResults_default_instance_;
class synDist;
struct synDistDefaultTypeInternal;
extern synDistDefaultTypeInternal _synDist_default_instance_;
class track_Sel;
struct track_SelDefaultTypeInternal;
extern track_SelDefaultTypeInternal _track_Sel_default_instance_;
}  // namespace CS1_CS2
PROTOBUF_NAMESPACE_OPEN
template<> ::CS1_CS2::ExactResult* Arena::CreateMaybeMessage<::CS1_CS2::ExactResult>(Arena*);
template<> ::CS1_CS2::PreResults* Arena::CreateMaybeMessage<::CS1_CS2::PreResults>(Arena*);
template<> ::CS1_CS2::synDist* Arena::CreateMaybeMessage<::CS1_CS2::synDist>(Arena*);
template<> ::CS1_CS2::track_Sel* Arena::CreateMaybeMessage<::CS1_CS2::track_Sel>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace CS1_CS2 {

// ===================================================================

class track_Sel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CS1_CS2.track_Sel) */ {
 public:
  inline track_Sel() : track_Sel(nullptr) {}
  ~track_Sel() override;
  explicit PROTOBUF_CONSTEXPR track_Sel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  track_Sel(const track_Sel& from);
  track_Sel(track_Sel&& from) noexcept
    : track_Sel() {
    *this = ::std::move(from);
  }

  inline track_Sel& operator=(const track_Sel& from) {
    CopyFrom(from);
    return *this;
  }
  inline track_Sel& operator=(track_Sel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const track_Sel& default_instance() {
    return *internal_default_instance();
  }
  static inline const track_Sel* internal_default_instance() {
    return reinterpret_cast<const track_Sel*>(
               &_track_Sel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(track_Sel& a, track_Sel& b) {
    a.Swap(&b);
  }
  inline void Swap(track_Sel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(track_Sel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  track_Sel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<track_Sel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const track_Sel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const track_Sel& from) {
    track_Sel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(track_Sel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CS1_CS2.track_Sel";
  }
  protected:
  explicit track_Sel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDisFieldNumber = 1,
    kLableFieldNumber = 2,
  };
  // double dis = 1;
  void clear_dis();
  double dis() const;
  void set_dis(double value);
  private:
  double _internal_dis() const;
  void _internal_set_dis(double value);
  public:

  // int32 lable = 2;
  void clear_lable();
  int32_t lable() const;
  void set_lable(int32_t value);
  private:
  int32_t _internal_lable() const;
  void _internal_set_lable(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CS1_CS2.track_Sel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double dis_;
    int32_t lable_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_CS1_5fand_5fCS2_2eproto;
};
// -------------------------------------------------------------------

class synDist final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CS1_CS2.synDist) */ {
 public:
  inline synDist() : synDist(nullptr) {}
  ~synDist() override;
  explicit PROTOBUF_CONSTEXPR synDist(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  synDist(const synDist& from);
  synDist(synDist&& from) noexcept
    : synDist() {
    *this = ::std::move(from);
  }

  inline synDist& operator=(const synDist& from) {
    CopyFrom(from);
    return *this;
  }
  inline synDist& operator=(synDist&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const synDist& default_instance() {
    return *internal_default_instance();
  }
  static inline const synDist* internal_default_instance() {
    return reinterpret_cast<const synDist*>(
               &_synDist_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(synDist& a, synDist& b) {
    a.Swap(&b);
  }
  inline void Swap(synDist* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(synDist* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  synDist* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<synDist>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const synDist& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const synDist& from) {
    synDist::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(synDist* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CS1_CS2.synDist";
  }
  protected:
  explicit synDist(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kDisFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // double dis = 2;
  void clear_dis();
  double dis() const;
  void set_dis(double value);
  private:
  double _internal_dis() const;
  void _internal_set_dis(double value);
  public:

  // @@protoc_insertion_point(class_scope:CS1_CS2.synDist)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    double dis_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_CS1_5fand_5fCS2_2eproto;
};
// -------------------------------------------------------------------

class PreResults final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CS1_CS2.PreResults) */ {
 public:
  inline PreResults() : PreResults(nullptr) {}
  ~PreResults() override;
  explicit PROTOBUF_CONSTEXPR PreResults(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PreResults(const PreResults& from);
  PreResults(PreResults&& from) noexcept
    : PreResults() {
    *this = ::std::move(from);
  }

  inline PreResults& operator=(const PreResults& from) {
    CopyFrom(from);
    return *this;
  }
  inline PreResults& operator=(PreResults&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PreResults& default_instance() {
    return *internal_default_instance();
  }
  static inline const PreResults* internal_default_instance() {
    return reinterpret_cast<const PreResults*>(
               &_PreResults_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PreResults& a, PreResults& b) {
    a.Swap(&b);
  }
  inline void Swap(PreResults* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PreResults* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PreResults* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PreResults>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PreResults& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PreResults& from) {
    PreResults::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PreResults* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CS1_CS2.PreResults";
  }
  protected:
  explicit PreResults(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kESDFieldNumber = 2,
    kKIDFieldNumber = 3,
    kDistlistFieldNumber = 4,
    kKFieldNumber = 1,
  };
  // repeated string ESD = 2;
  int esd_size() const;
  private:
  int _internal_esd_size() const;
  public:
  void clear_esd();
  const std::string& esd(int index) const;
  std::string* mutable_esd(int index);
  void set_esd(int index, const std::string& value);
  void set_esd(int index, std::string&& value);
  void set_esd(int index, const char* value);
  void set_esd(int index, const char* value, size_t size);
  std::string* add_esd();
  void add_esd(const std::string& value);
  void add_esd(std::string&& value);
  void add_esd(const char* value);
  void add_esd(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& esd() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_esd();
  private:
  const std::string& _internal_esd(int index) const;
  std::string* _internal_add_esd();
  public:

  // repeated .CS1_CS2.track_Sel KID = 3;
  int kid_size() const;
  private:
  int _internal_kid_size() const;
  public:
  void clear_kid();
  ::CS1_CS2::track_Sel* mutable_kid(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CS1_CS2::track_Sel >*
      mutable_kid();
  private:
  const ::CS1_CS2::track_Sel& _internal_kid(int index) const;
  ::CS1_CS2::track_Sel* _internal_add_kid();
  public:
  const ::CS1_CS2::track_Sel& kid(int index) const;
  ::CS1_CS2::track_Sel* add_kid();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CS1_CS2::track_Sel >&
      kid() const;

  // repeated .CS1_CS2.synDist distlist = 4;
  int distlist_size() const;
  private:
  int _internal_distlist_size() const;
  public:
  void clear_distlist();
  ::CS1_CS2::synDist* mutable_distlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CS1_CS2::synDist >*
      mutable_distlist();
  private:
  const ::CS1_CS2::synDist& _internal_distlist(int index) const;
  ::CS1_CS2::synDist* _internal_add_distlist();
  public:
  const ::CS1_CS2::synDist& distlist(int index) const;
  ::CS1_CS2::synDist* add_distlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CS1_CS2::synDist >&
      distlist() const;

  // int32 k = 1;
  void clear_k();
  int32_t k() const;
  void set_k(int32_t value);
  private:
  int32_t _internal_k() const;
  void _internal_set_k(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CS1_CS2.PreResults)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> esd_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CS1_CS2::track_Sel > kid_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CS1_CS2::synDist > distlist_;
    int32_t k_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_CS1_5fand_5fCS2_2eproto;
};
// -------------------------------------------------------------------

class ExactResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CS1_CS2.ExactResult) */ {
 public:
  inline ExactResult() : ExactResult(nullptr) {}
  ~ExactResult() override;
  explicit PROTOBUF_CONSTEXPR ExactResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExactResult(const ExactResult& from);
  ExactResult(ExactResult&& from) noexcept
    : ExactResult() {
    *this = ::std::move(from);
  }

  inline ExactResult& operator=(const ExactResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExactResult& operator=(ExactResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExactResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExactResult* internal_default_instance() {
    return reinterpret_cast<const ExactResult*>(
               &_ExactResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ExactResult& a, ExactResult& b) {
    a.Swap(&b);
  }
  inline void Swap(ExactResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExactResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExactResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExactResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExactResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExactResult& from) {
    ExactResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExactResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CS1_CS2.ExactResult";
  }
  protected:
  explicit ExactResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKidFieldNumber = 1,
    kMindisFieldNumber = 2,
  };
  // repeated .CS1_CS2.track_Sel kid = 1;
  int kid_size() const;
  private:
  int _internal_kid_size() const;
  public:
  void clear_kid();
  ::CS1_CS2::track_Sel* mutable_kid(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CS1_CS2::track_Sel >*
      mutable_kid();
  private:
  const ::CS1_CS2::track_Sel& _internal_kid(int index) const;
  ::CS1_CS2::track_Sel* _internal_add_kid();
  public:
  const ::CS1_CS2::track_Sel& kid(int index) const;
  ::CS1_CS2::track_Sel* add_kid();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CS1_CS2::track_Sel >&
      kid() const;

  // repeated double mindis = 2;
  int mindis_size() const;
  private:
  int _internal_mindis_size() const;
  public:
  void clear_mindis();
  private:
  double _internal_mindis(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_mindis() const;
  void _internal_add_mindis(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_mindis();
  public:
  double mindis(int index) const;
  void set_mindis(int index, double value);
  void add_mindis(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      mindis() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_mindis();

  // @@protoc_insertion_point(class_scope:CS1_CS2.ExactResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CS1_CS2::track_Sel > kid_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > mindis_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_CS1_5fand_5fCS2_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// track_Sel

// double dis = 1;
inline void track_Sel::clear_dis() {
  _impl_.dis_ = 0;
}
inline double track_Sel::_internal_dis() const {
  return _impl_.dis_;
}
inline double track_Sel::dis() const {
  // @@protoc_insertion_point(field_get:CS1_CS2.track_Sel.dis)
  return _internal_dis();
}
inline void track_Sel::_internal_set_dis(double value) {
  
  _impl_.dis_ = value;
}
inline void track_Sel::set_dis(double value) {
  _internal_set_dis(value);
  // @@protoc_insertion_point(field_set:CS1_CS2.track_Sel.dis)
}

// int32 lable = 2;
inline void track_Sel::clear_lable() {
  _impl_.lable_ = 0;
}
inline int32_t track_Sel::_internal_lable() const {
  return _impl_.lable_;
}
inline int32_t track_Sel::lable() const {
  // @@protoc_insertion_point(field_get:CS1_CS2.track_Sel.lable)
  return _internal_lable();
}
inline void track_Sel::_internal_set_lable(int32_t value) {
  
  _impl_.lable_ = value;
}
inline void track_Sel::set_lable(int32_t value) {
  _internal_set_lable(value);
  // @@protoc_insertion_point(field_set:CS1_CS2.track_Sel.lable)
}

// -------------------------------------------------------------------

// synDist

// string key = 1;
inline void synDist::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& synDist::key() const {
  // @@protoc_insertion_point(field_get:CS1_CS2.synDist.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void synDist::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CS1_CS2.synDist.key)
}
inline std::string* synDist::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:CS1_CS2.synDist.key)
  return _s;
}
inline const std::string& synDist::_internal_key() const {
  return _impl_.key_.Get();
}
inline void synDist::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* synDist::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* synDist::release_key() {
  // @@protoc_insertion_point(field_release:CS1_CS2.synDist.key)
  return _impl_.key_.Release();
}
inline void synDist::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CS1_CS2.synDist.key)
}

// double dis = 2;
inline void synDist::clear_dis() {
  _impl_.dis_ = 0;
}
inline double synDist::_internal_dis() const {
  return _impl_.dis_;
}
inline double synDist::dis() const {
  // @@protoc_insertion_point(field_get:CS1_CS2.synDist.dis)
  return _internal_dis();
}
inline void synDist::_internal_set_dis(double value) {
  
  _impl_.dis_ = value;
}
inline void synDist::set_dis(double value) {
  _internal_set_dis(value);
  // @@protoc_insertion_point(field_set:CS1_CS2.synDist.dis)
}

// -------------------------------------------------------------------

// PreResults

// int32 k = 1;
inline void PreResults::clear_k() {
  _impl_.k_ = 0;
}
inline int32_t PreResults::_internal_k() const {
  return _impl_.k_;
}
inline int32_t PreResults::k() const {
  // @@protoc_insertion_point(field_get:CS1_CS2.PreResults.k)
  return _internal_k();
}
inline void PreResults::_internal_set_k(int32_t value) {
  
  _impl_.k_ = value;
}
inline void PreResults::set_k(int32_t value) {
  _internal_set_k(value);
  // @@protoc_insertion_point(field_set:CS1_CS2.PreResults.k)
}

// repeated string ESD = 2;
inline int PreResults::_internal_esd_size() const {
  return _impl_.esd_.size();
}
inline int PreResults::esd_size() const {
  return _internal_esd_size();
}
inline void PreResults::clear_esd() {
  _impl_.esd_.Clear();
}
inline std::string* PreResults::add_esd() {
  std::string* _s = _internal_add_esd();
  // @@protoc_insertion_point(field_add_mutable:CS1_CS2.PreResults.ESD)
  return _s;
}
inline const std::string& PreResults::_internal_esd(int index) const {
  return _impl_.esd_.Get(index);
}
inline const std::string& PreResults::esd(int index) const {
  // @@protoc_insertion_point(field_get:CS1_CS2.PreResults.ESD)
  return _internal_esd(index);
}
inline std::string* PreResults::mutable_esd(int index) {
  // @@protoc_insertion_point(field_mutable:CS1_CS2.PreResults.ESD)
  return _impl_.esd_.Mutable(index);
}
inline void PreResults::set_esd(int index, const std::string& value) {
  _impl_.esd_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CS1_CS2.PreResults.ESD)
}
inline void PreResults::set_esd(int index, std::string&& value) {
  _impl_.esd_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CS1_CS2.PreResults.ESD)
}
inline void PreResults::set_esd(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.esd_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CS1_CS2.PreResults.ESD)
}
inline void PreResults::set_esd(int index, const char* value, size_t size) {
  _impl_.esd_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CS1_CS2.PreResults.ESD)
}
inline std::string* PreResults::_internal_add_esd() {
  return _impl_.esd_.Add();
}
inline void PreResults::add_esd(const std::string& value) {
  _impl_.esd_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CS1_CS2.PreResults.ESD)
}
inline void PreResults::add_esd(std::string&& value) {
  _impl_.esd_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CS1_CS2.PreResults.ESD)
}
inline void PreResults::add_esd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.esd_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CS1_CS2.PreResults.ESD)
}
inline void PreResults::add_esd(const char* value, size_t size) {
  _impl_.esd_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CS1_CS2.PreResults.ESD)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PreResults::esd() const {
  // @@protoc_insertion_point(field_list:CS1_CS2.PreResults.ESD)
  return _impl_.esd_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PreResults::mutable_esd() {
  // @@protoc_insertion_point(field_mutable_list:CS1_CS2.PreResults.ESD)
  return &_impl_.esd_;
}

// repeated .CS1_CS2.track_Sel KID = 3;
inline int PreResults::_internal_kid_size() const {
  return _impl_.kid_.size();
}
inline int PreResults::kid_size() const {
  return _internal_kid_size();
}
inline void PreResults::clear_kid() {
  _impl_.kid_.Clear();
}
inline ::CS1_CS2::track_Sel* PreResults::mutable_kid(int index) {
  // @@protoc_insertion_point(field_mutable:CS1_CS2.PreResults.KID)
  return _impl_.kid_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CS1_CS2::track_Sel >*
PreResults::mutable_kid() {
  // @@protoc_insertion_point(field_mutable_list:CS1_CS2.PreResults.KID)
  return &_impl_.kid_;
}
inline const ::CS1_CS2::track_Sel& PreResults::_internal_kid(int index) const {
  return _impl_.kid_.Get(index);
}
inline const ::CS1_CS2::track_Sel& PreResults::kid(int index) const {
  // @@protoc_insertion_point(field_get:CS1_CS2.PreResults.KID)
  return _internal_kid(index);
}
inline ::CS1_CS2::track_Sel* PreResults::_internal_add_kid() {
  return _impl_.kid_.Add();
}
inline ::CS1_CS2::track_Sel* PreResults::add_kid() {
  ::CS1_CS2::track_Sel* _add = _internal_add_kid();
  // @@protoc_insertion_point(field_add:CS1_CS2.PreResults.KID)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CS1_CS2::track_Sel >&
PreResults::kid() const {
  // @@protoc_insertion_point(field_list:CS1_CS2.PreResults.KID)
  return _impl_.kid_;
}

// repeated .CS1_CS2.synDist distlist = 4;
inline int PreResults::_internal_distlist_size() const {
  return _impl_.distlist_.size();
}
inline int PreResults::distlist_size() const {
  return _internal_distlist_size();
}
inline void PreResults::clear_distlist() {
  _impl_.distlist_.Clear();
}
inline ::CS1_CS2::synDist* PreResults::mutable_distlist(int index) {
  // @@protoc_insertion_point(field_mutable:CS1_CS2.PreResults.distlist)
  return _impl_.distlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CS1_CS2::synDist >*
PreResults::mutable_distlist() {
  // @@protoc_insertion_point(field_mutable_list:CS1_CS2.PreResults.distlist)
  return &_impl_.distlist_;
}
inline const ::CS1_CS2::synDist& PreResults::_internal_distlist(int index) const {
  return _impl_.distlist_.Get(index);
}
inline const ::CS1_CS2::synDist& PreResults::distlist(int index) const {
  // @@protoc_insertion_point(field_get:CS1_CS2.PreResults.distlist)
  return _internal_distlist(index);
}
inline ::CS1_CS2::synDist* PreResults::_internal_add_distlist() {
  return _impl_.distlist_.Add();
}
inline ::CS1_CS2::synDist* PreResults::add_distlist() {
  ::CS1_CS2::synDist* _add = _internal_add_distlist();
  // @@protoc_insertion_point(field_add:CS1_CS2.PreResults.distlist)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CS1_CS2::synDist >&
PreResults::distlist() const {
  // @@protoc_insertion_point(field_list:CS1_CS2.PreResults.distlist)
  return _impl_.distlist_;
}

// -------------------------------------------------------------------

// ExactResult

// repeated .CS1_CS2.track_Sel kid = 1;
inline int ExactResult::_internal_kid_size() const {
  return _impl_.kid_.size();
}
inline int ExactResult::kid_size() const {
  return _internal_kid_size();
}
inline void ExactResult::clear_kid() {
  _impl_.kid_.Clear();
}
inline ::CS1_CS2::track_Sel* ExactResult::mutable_kid(int index) {
  // @@protoc_insertion_point(field_mutable:CS1_CS2.ExactResult.kid)
  return _impl_.kid_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CS1_CS2::track_Sel >*
ExactResult::mutable_kid() {
  // @@protoc_insertion_point(field_mutable_list:CS1_CS2.ExactResult.kid)
  return &_impl_.kid_;
}
inline const ::CS1_CS2::track_Sel& ExactResult::_internal_kid(int index) const {
  return _impl_.kid_.Get(index);
}
inline const ::CS1_CS2::track_Sel& ExactResult::kid(int index) const {
  // @@protoc_insertion_point(field_get:CS1_CS2.ExactResult.kid)
  return _internal_kid(index);
}
inline ::CS1_CS2::track_Sel* ExactResult::_internal_add_kid() {
  return _impl_.kid_.Add();
}
inline ::CS1_CS2::track_Sel* ExactResult::add_kid() {
  ::CS1_CS2::track_Sel* _add = _internal_add_kid();
  // @@protoc_insertion_point(field_add:CS1_CS2.ExactResult.kid)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CS1_CS2::track_Sel >&
ExactResult::kid() const {
  // @@protoc_insertion_point(field_list:CS1_CS2.ExactResult.kid)
  return _impl_.kid_;
}

// repeated double mindis = 2;
inline int ExactResult::_internal_mindis_size() const {
  return _impl_.mindis_.size();
}
inline int ExactResult::mindis_size() const {
  return _internal_mindis_size();
}
inline void ExactResult::clear_mindis() {
  _impl_.mindis_.Clear();
}
inline double ExactResult::_internal_mindis(int index) const {
  return _impl_.mindis_.Get(index);
}
inline double ExactResult::mindis(int index) const {
  // @@protoc_insertion_point(field_get:CS1_CS2.ExactResult.mindis)
  return _internal_mindis(index);
}
inline void ExactResult::set_mindis(int index, double value) {
  _impl_.mindis_.Set(index, value);
  // @@protoc_insertion_point(field_set:CS1_CS2.ExactResult.mindis)
}
inline void ExactResult::_internal_add_mindis(double value) {
  _impl_.mindis_.Add(value);
}
inline void ExactResult::add_mindis(double value) {
  _internal_add_mindis(value);
  // @@protoc_insertion_point(field_add:CS1_CS2.ExactResult.mindis)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
ExactResult::_internal_mindis() const {
  return _impl_.mindis_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
ExactResult::mindis() const {
  // @@protoc_insertion_point(field_list:CS1_CS2.ExactResult.mindis)
  return _internal_mindis();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
ExactResult::_internal_mutable_mindis() {
  return &_impl_.mindis_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
ExactResult::mutable_mindis() {
  // @@protoc_insertion_point(field_mutable_list:CS1_CS2.ExactResult.mindis)
  return _internal_mutable_mindis();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace CS1_CS2

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_CS1_5fand_5fCS2_2eproto
