// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DO_and_CS1.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_DO_5fand_5fCS1_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_DO_5fand_5fCS1_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_DO_5fand_5fCS1_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_DO_5fand_5fCS1_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_DO_5fand_5fCS1_2eproto;
namespace DO_CS1 {
class Capsule;
struct CapsuleDefaultTypeInternal;
extern CapsuleDefaultTypeInternal _Capsule_default_instance_;
class enc_id;
struct enc_idDefaultTypeInternal;
extern enc_idDefaultTypeInternal _enc_id_default_instance_;
class encoding;
struct encodingDefaultTypeInternal;
extern encodingDefaultTypeInternal _encoding_default_instance_;
class msg;
struct msgDefaultTypeInternal;
extern msgDefaultTypeInternal _msg_default_instance_;
class msg_MappingTableEntry_DoNotUse;
struct msg_MappingTableEntry_DoNotUseDefaultTypeInternal;
extern msg_MappingTableEntry_DoNotUseDefaultTypeInternal _msg_MappingTableEntry_DoNotUse_default_instance_;
class msg_table_val;
struct msg_table_valDefaultTypeInternal;
extern msg_table_valDefaultTypeInternal _msg_table_val_default_instance_;
class track;
struct trackDefaultTypeInternal;
extern trackDefaultTypeInternal _track_default_instance_;
}  // namespace DO_CS1
PROTOBUF_NAMESPACE_OPEN
template<> ::DO_CS1::Capsule* Arena::CreateMaybeMessage<::DO_CS1::Capsule>(Arena*);
template<> ::DO_CS1::enc_id* Arena::CreateMaybeMessage<::DO_CS1::enc_id>(Arena*);
template<> ::DO_CS1::encoding* Arena::CreateMaybeMessage<::DO_CS1::encoding>(Arena*);
template<> ::DO_CS1::msg* Arena::CreateMaybeMessage<::DO_CS1::msg>(Arena*);
template<> ::DO_CS1::msg_MappingTableEntry_DoNotUse* Arena::CreateMaybeMessage<::DO_CS1::msg_MappingTableEntry_DoNotUse>(Arena*);
template<> ::DO_CS1::msg_table_val* Arena::CreateMaybeMessage<::DO_CS1::msg_table_val>(Arena*);
template<> ::DO_CS1::track* Arena::CreateMaybeMessage<::DO_CS1::track>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace DO_CS1 {

// ===================================================================

class track final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DO_CS1.track) */ {
 public:
  inline track() : track(nullptr) {}
  ~track() override;
  explicit PROTOBUF_CONSTEXPR track(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  track(const track& from);
  track(track&& from) noexcept
    : track() {
    *this = ::std::move(from);
  }

  inline track& operator=(const track& from) {
    CopyFrom(from);
    return *this;
  }
  inline track& operator=(track&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const track& default_instance() {
    return *internal_default_instance();
  }
  static inline const track* internal_default_instance() {
    return reinterpret_cast<const track*>(
               &_track_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(track& a, track& b) {
    a.Swap(&b);
  }
  inline void Swap(track* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(track* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  track* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<track>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const track& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const track& from) {
    track::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(track* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DO_CS1.track";
  }
  protected:
  explicit track(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHilFieldNumber = 2,
    kTimeFieldNumber = 1,
  };
  // string hil = 2;
  void clear_hil();
  const std::string& hil() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hil(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hil();
  PROTOBUF_NODISCARD std::string* release_hil();
  void set_allocated_hil(std::string* hil);
  private:
  const std::string& _internal_hil() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hil(const std::string& value);
  std::string* _internal_mutable_hil();
  public:

  // double time = 1;
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:DO_CS1.track)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hil_;
    double time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_DO_5fand_5fCS1_2eproto;
};
// -------------------------------------------------------------------

class encoding final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DO_CS1.encoding) */ {
 public:
  inline encoding() : encoding(nullptr) {}
  ~encoding() override;
  explicit PROTOBUF_CONSTEXPR encoding(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  encoding(const encoding& from);
  encoding(encoding&& from) noexcept
    : encoding() {
    *this = ::std::move(from);
  }

  inline encoding& operator=(const encoding& from) {
    CopyFrom(from);
    return *this;
  }
  inline encoding& operator=(encoding&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const encoding& default_instance() {
    return *internal_default_instance();
  }
  static inline const encoding* internal_default_instance() {
    return reinterpret_cast<const encoding*>(
               &_encoding_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(encoding& a, encoding& b) {
    a.Swap(&b);
  }
  inline void Swap(encoding* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(encoding* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  encoding* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<encoding>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const encoding& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const encoding& from) {
    encoding::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(encoding* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DO_CS1.encoding";
  }
  protected:
  explicit encoding(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncodedFieldNumber = 1,
  };
  // repeated .DO_CS1.track encoded = 1;
  int encoded_size() const;
  private:
  int _internal_encoded_size() const;
  public:
  void clear_encoded();
  ::DO_CS1::track* mutable_encoded(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DO_CS1::track >*
      mutable_encoded();
  private:
  const ::DO_CS1::track& _internal_encoded(int index) const;
  ::DO_CS1::track* _internal_add_encoded();
  public:
  const ::DO_CS1::track& encoded(int index) const;
  ::DO_CS1::track* add_encoded();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DO_CS1::track >&
      encoded() const;

  // @@protoc_insertion_point(class_scope:DO_CS1.encoding)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DO_CS1::track > encoded_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_DO_5fand_5fCS1_2eproto;
};
// -------------------------------------------------------------------

class Capsule final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DO_CS1.Capsule) */ {
 public:
  inline Capsule() : Capsule(nullptr) {}
  ~Capsule() override;
  explicit PROTOBUF_CONSTEXPR Capsule(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Capsule(const Capsule& from);
  Capsule(Capsule&& from) noexcept
    : Capsule() {
    *this = ::std::move(from);
  }

  inline Capsule& operator=(const Capsule& from) {
    CopyFrom(from);
    return *this;
  }
  inline Capsule& operator=(Capsule&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Capsule& default_instance() {
    return *internal_default_instance();
  }
  static inline const Capsule* internal_default_instance() {
    return reinterpret_cast<const Capsule*>(
               &_Capsule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Capsule& a, Capsule& b) {
    a.Swap(&b);
  }
  inline void Swap(Capsule* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Capsule* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Capsule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Capsule>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Capsule& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Capsule& from) {
    Capsule::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Capsule* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DO_CS1.Capsule";
  }
  protected:
  explicit Capsule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kX1FieldNumber = 1,
    kX2FieldNumber = 2,
    kX3FieldNumber = 3,
  };
  // int32 x1 = 1;
  void clear_x1();
  int32_t x1() const;
  void set_x1(int32_t value);
  private:
  int32_t _internal_x1() const;
  void _internal_set_x1(int32_t value);
  public:

  // int32 x2 = 2;
  void clear_x2();
  int32_t x2() const;
  void set_x2(int32_t value);
  private:
  int32_t _internal_x2() const;
  void _internal_set_x2(int32_t value);
  public:

  // int32 x3 = 3;
  void clear_x3();
  int32_t x3() const;
  void set_x3(int32_t value);
  private:
  int32_t _internal_x3() const;
  void _internal_set_x3(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:DO_CS1.Capsule)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t x1_;
    int32_t x2_;
    int32_t x3_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_DO_5fand_5fCS1_2eproto;
};
// -------------------------------------------------------------------

class enc_id final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DO_CS1.enc_id) */ {
 public:
  inline enc_id() : enc_id(nullptr) {}
  ~enc_id() override;
  explicit PROTOBUF_CONSTEXPR enc_id(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  enc_id(const enc_id& from);
  enc_id(enc_id&& from) noexcept
    : enc_id() {
    *this = ::std::move(from);
  }

  inline enc_id& operator=(const enc_id& from) {
    CopyFrom(from);
    return *this;
  }
  inline enc_id& operator=(enc_id&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const enc_id& default_instance() {
    return *internal_default_instance();
  }
  static inline const enc_id* internal_default_instance() {
    return reinterpret_cast<const enc_id*>(
               &_enc_id_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(enc_id& a, enc_id& b) {
    a.Swap(&b);
  }
  inline void Swap(enc_id* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(enc_id* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  enc_id* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<enc_id>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const enc_id& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const enc_id& from) {
    enc_id::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(enc_id* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DO_CS1.enc_id";
  }
  protected:
  explicit enc_id(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncValFieldNumber = 1,
    kVeryValFieldNumber = 2,
  };
  // repeated string enc_val = 1;
  int enc_val_size() const;
  private:
  int _internal_enc_val_size() const;
  public:
  void clear_enc_val();
  const std::string& enc_val(int index) const;
  std::string* mutable_enc_val(int index);
  void set_enc_val(int index, const std::string& value);
  void set_enc_val(int index, std::string&& value);
  void set_enc_val(int index, const char* value);
  void set_enc_val(int index, const char* value, size_t size);
  std::string* add_enc_val();
  void add_enc_val(const std::string& value);
  void add_enc_val(std::string&& value);
  void add_enc_val(const char* value);
  void add_enc_val(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& enc_val() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_enc_val();
  private:
  const std::string& _internal_enc_val(int index) const;
  std::string* _internal_add_enc_val();
  public:

  // .DO_CS1.Capsule very_val = 2;
  bool has_very_val() const;
  private:
  bool _internal_has_very_val() const;
  public:
  void clear_very_val();
  const ::DO_CS1::Capsule& very_val() const;
  PROTOBUF_NODISCARD ::DO_CS1::Capsule* release_very_val();
  ::DO_CS1::Capsule* mutable_very_val();
  void set_allocated_very_val(::DO_CS1::Capsule* very_val);
  private:
  const ::DO_CS1::Capsule& _internal_very_val() const;
  ::DO_CS1::Capsule* _internal_mutable_very_val();
  public:
  void unsafe_arena_set_allocated_very_val(
      ::DO_CS1::Capsule* very_val);
  ::DO_CS1::Capsule* unsafe_arena_release_very_val();

  // @@protoc_insertion_point(class_scope:DO_CS1.enc_id)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> enc_val_;
    ::DO_CS1::Capsule* very_val_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_DO_5fand_5fCS1_2eproto;
};
// -------------------------------------------------------------------

class msg_table_val final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DO_CS1.msg.table_val) */ {
 public:
  inline msg_table_val() : msg_table_val(nullptr) {}
  ~msg_table_val() override;
  explicit PROTOBUF_CONSTEXPR msg_table_val(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  msg_table_val(const msg_table_val& from);
  msg_table_val(msg_table_val&& from) noexcept
    : msg_table_val() {
    *this = ::std::move(from);
  }

  inline msg_table_val& operator=(const msg_table_val& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg_table_val& operator=(msg_table_val&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const msg_table_val& default_instance() {
    return *internal_default_instance();
  }
  static inline const msg_table_val* internal_default_instance() {
    return reinterpret_cast<const msg_table_val*>(
               &_msg_table_val_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(msg_table_val& a, msg_table_val& b) {
    a.Swap(&b);
  }
  inline void Swap(msg_table_val* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(msg_table_val* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  msg_table_val* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<msg_table_val>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const msg_table_val& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const msg_table_val& from) {
    msg_table_val::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_table_val* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DO_CS1.msg.table_val";
  }
  protected:
  explicit msg_table_val(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableContentFieldNumber = 1,
  };
  // repeated string table_content = 1;
  int table_content_size() const;
  private:
  int _internal_table_content_size() const;
  public:
  void clear_table_content();
  const std::string& table_content(int index) const;
  std::string* mutable_table_content(int index);
  void set_table_content(int index, const std::string& value);
  void set_table_content(int index, std::string&& value);
  void set_table_content(int index, const char* value);
  void set_table_content(int index, const char* value, size_t size);
  std::string* add_table_content();
  void add_table_content(const std::string& value);
  void add_table_content(std::string&& value);
  void add_table_content(const char* value);
  void add_table_content(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& table_content() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_table_content();
  private:
  const std::string& _internal_table_content(int index) const;
  std::string* _internal_add_table_content();
  public:

  // @@protoc_insertion_point(class_scope:DO_CS1.msg.table_val)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> table_content_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_DO_5fand_5fCS1_2eproto;
};
// -------------------------------------------------------------------

class msg_MappingTableEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<msg_MappingTableEntry_DoNotUse, 
    std::string, ::DO_CS1::msg_table_val,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<msg_MappingTableEntry_DoNotUse, 
    std::string, ::DO_CS1::msg_table_val,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  msg_MappingTableEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR msg_MappingTableEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit msg_MappingTableEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const msg_MappingTableEntry_DoNotUse& other);
  static const msg_MappingTableEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const msg_MappingTableEntry_DoNotUse*>(&_msg_MappingTableEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "DO_CS1.msg.MappingTableEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_DO_5fand_5fCS1_2eproto;
};

// -------------------------------------------------------------------

class msg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DO_CS1.msg) */ {
 public:
  inline msg() : msg(nullptr) {}
  ~msg() override;
  explicit PROTOBUF_CONSTEXPR msg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  msg(const msg& from);
  msg(msg&& from) noexcept
    : msg() {
    *this = ::std::move(from);
  }

  inline msg& operator=(const msg& from) {
    CopyFrom(from);
    return *this;
  }
  inline msg& operator=(msg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const msg& default_instance() {
    return *internal_default_instance();
  }
  static inline const msg* internal_default_instance() {
    return reinterpret_cast<const msg*>(
               &_msg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(msg& a, msg& b) {
    a.Swap(&b);
  }
  inline void Swap(msg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(msg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  msg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<msg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const msg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const msg& from) {
    msg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DO_CS1.msg";
  }
  protected:
  explicit msg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef msg_table_val table_val;

  // accessors -------------------------------------------------------

  enum : int {
    kMappingTableFieldNumber = 1,
    kEncodingListFieldNumber = 2,
    kRkFieldNumber = 3,
    kEncryptedIDFieldNumber = 4,
  };
  // map<string, .DO_CS1.msg.table_val> mapping_table = 1;
  int mapping_table_size() const;
  private:
  int _internal_mapping_table_size() const;
  public:
  void clear_mapping_table();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DO_CS1::msg_table_val >&
      _internal_mapping_table() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DO_CS1::msg_table_val >*
      _internal_mutable_mapping_table();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DO_CS1::msg_table_val >&
      mapping_table() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DO_CS1::msg_table_val >*
      mutable_mapping_table();

  // repeated .DO_CS1.encoding encodingList = 2;
  int encodinglist_size() const;
  private:
  int _internal_encodinglist_size() const;
  public:
  void clear_encodinglist();
  ::DO_CS1::encoding* mutable_encodinglist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DO_CS1::encoding >*
      mutable_encodinglist();
  private:
  const ::DO_CS1::encoding& _internal_encodinglist(int index) const;
  ::DO_CS1::encoding* _internal_add_encodinglist();
  public:
  const ::DO_CS1::encoding& encodinglist(int index) const;
  ::DO_CS1::encoding* add_encodinglist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DO_CS1::encoding >&
      encodinglist() const;

  // string rk = 3;
  void clear_rk();
  const std::string& rk() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rk(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rk();
  PROTOBUF_NODISCARD std::string* release_rk();
  void set_allocated_rk(std::string* rk);
  private:
  const std::string& _internal_rk() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rk(const std::string& value);
  std::string* _internal_mutable_rk();
  public:

  // .DO_CS1.enc_id encryptedID = 4;
  bool has_encryptedid() const;
  private:
  bool _internal_has_encryptedid() const;
  public:
  void clear_encryptedid();
  const ::DO_CS1::enc_id& encryptedid() const;
  PROTOBUF_NODISCARD ::DO_CS1::enc_id* release_encryptedid();
  ::DO_CS1::enc_id* mutable_encryptedid();
  void set_allocated_encryptedid(::DO_CS1::enc_id* encryptedid);
  private:
  const ::DO_CS1::enc_id& _internal_encryptedid() const;
  ::DO_CS1::enc_id* _internal_mutable_encryptedid();
  public:
  void unsafe_arena_set_allocated_encryptedid(
      ::DO_CS1::enc_id* encryptedid);
  ::DO_CS1::enc_id* unsafe_arena_release_encryptedid();

  // @@protoc_insertion_point(class_scope:DO_CS1.msg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        msg_MappingTableEntry_DoNotUse,
        std::string, ::DO_CS1::msg_table_val,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> mapping_table_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DO_CS1::encoding > encodinglist_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rk_;
    ::DO_CS1::enc_id* encryptedid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_DO_5fand_5fCS1_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// track

// double time = 1;
inline void track::clear_time() {
  _impl_.time_ = 0;
}
inline double track::_internal_time() const {
  return _impl_.time_;
}
inline double track::time() const {
  // @@protoc_insertion_point(field_get:DO_CS1.track.time)
  return _internal_time();
}
inline void track::_internal_set_time(double value) {
  
  _impl_.time_ = value;
}
inline void track::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:DO_CS1.track.time)
}

// string hil = 2;
inline void track::clear_hil() {
  _impl_.hil_.ClearToEmpty();
}
inline const std::string& track::hil() const {
  // @@protoc_insertion_point(field_get:DO_CS1.track.hil)
  return _internal_hil();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void track::set_hil(ArgT0&& arg0, ArgT... args) {
 
 _impl_.hil_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DO_CS1.track.hil)
}
inline std::string* track::mutable_hil() {
  std::string* _s = _internal_mutable_hil();
  // @@protoc_insertion_point(field_mutable:DO_CS1.track.hil)
  return _s;
}
inline const std::string& track::_internal_hil() const {
  return _impl_.hil_.Get();
}
inline void track::_internal_set_hil(const std::string& value) {
  
  _impl_.hil_.Set(value, GetArenaForAllocation());
}
inline std::string* track::_internal_mutable_hil() {
  
  return _impl_.hil_.Mutable(GetArenaForAllocation());
}
inline std::string* track::release_hil() {
  // @@protoc_insertion_point(field_release:DO_CS1.track.hil)
  return _impl_.hil_.Release();
}
inline void track::set_allocated_hil(std::string* hil) {
  if (hil != nullptr) {
    
  } else {
    
  }
  _impl_.hil_.SetAllocated(hil, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hil_.IsDefault()) {
    _impl_.hil_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DO_CS1.track.hil)
}

// -------------------------------------------------------------------

// encoding

// repeated .DO_CS1.track encoded = 1;
inline int encoding::_internal_encoded_size() const {
  return _impl_.encoded_.size();
}
inline int encoding::encoded_size() const {
  return _internal_encoded_size();
}
inline void encoding::clear_encoded() {
  _impl_.encoded_.Clear();
}
inline ::DO_CS1::track* encoding::mutable_encoded(int index) {
  // @@protoc_insertion_point(field_mutable:DO_CS1.encoding.encoded)
  return _impl_.encoded_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DO_CS1::track >*
encoding::mutable_encoded() {
  // @@protoc_insertion_point(field_mutable_list:DO_CS1.encoding.encoded)
  return &_impl_.encoded_;
}
inline const ::DO_CS1::track& encoding::_internal_encoded(int index) const {
  return _impl_.encoded_.Get(index);
}
inline const ::DO_CS1::track& encoding::encoded(int index) const {
  // @@protoc_insertion_point(field_get:DO_CS1.encoding.encoded)
  return _internal_encoded(index);
}
inline ::DO_CS1::track* encoding::_internal_add_encoded() {
  return _impl_.encoded_.Add();
}
inline ::DO_CS1::track* encoding::add_encoded() {
  ::DO_CS1::track* _add = _internal_add_encoded();
  // @@protoc_insertion_point(field_add:DO_CS1.encoding.encoded)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DO_CS1::track >&
encoding::encoded() const {
  // @@protoc_insertion_point(field_list:DO_CS1.encoding.encoded)
  return _impl_.encoded_;
}

// -------------------------------------------------------------------

// Capsule

// int32 x1 = 1;
inline void Capsule::clear_x1() {
  _impl_.x1_ = 0;
}
inline int32_t Capsule::_internal_x1() const {
  return _impl_.x1_;
}
inline int32_t Capsule::x1() const {
  // @@protoc_insertion_point(field_get:DO_CS1.Capsule.x1)
  return _internal_x1();
}
inline void Capsule::_internal_set_x1(int32_t value) {
  
  _impl_.x1_ = value;
}
inline void Capsule::set_x1(int32_t value) {
  _internal_set_x1(value);
  // @@protoc_insertion_point(field_set:DO_CS1.Capsule.x1)
}

// int32 x2 = 2;
inline void Capsule::clear_x2() {
  _impl_.x2_ = 0;
}
inline int32_t Capsule::_internal_x2() const {
  return _impl_.x2_;
}
inline int32_t Capsule::x2() const {
  // @@protoc_insertion_point(field_get:DO_CS1.Capsule.x2)
  return _internal_x2();
}
inline void Capsule::_internal_set_x2(int32_t value) {
  
  _impl_.x2_ = value;
}
inline void Capsule::set_x2(int32_t value) {
  _internal_set_x2(value);
  // @@protoc_insertion_point(field_set:DO_CS1.Capsule.x2)
}

// int32 x3 = 3;
inline void Capsule::clear_x3() {
  _impl_.x3_ = 0;
}
inline int32_t Capsule::_internal_x3() const {
  return _impl_.x3_;
}
inline int32_t Capsule::x3() const {
  // @@protoc_insertion_point(field_get:DO_CS1.Capsule.x3)
  return _internal_x3();
}
inline void Capsule::_internal_set_x3(int32_t value) {
  
  _impl_.x3_ = value;
}
inline void Capsule::set_x3(int32_t value) {
  _internal_set_x3(value);
  // @@protoc_insertion_point(field_set:DO_CS1.Capsule.x3)
}

// -------------------------------------------------------------------

// enc_id

// repeated string enc_val = 1;
inline int enc_id::_internal_enc_val_size() const {
  return _impl_.enc_val_.size();
}
inline int enc_id::enc_val_size() const {
  return _internal_enc_val_size();
}
inline void enc_id::clear_enc_val() {
  _impl_.enc_val_.Clear();
}
inline std::string* enc_id::add_enc_val() {
  std::string* _s = _internal_add_enc_val();
  // @@protoc_insertion_point(field_add_mutable:DO_CS1.enc_id.enc_val)
  return _s;
}
inline const std::string& enc_id::_internal_enc_val(int index) const {
  return _impl_.enc_val_.Get(index);
}
inline const std::string& enc_id::enc_val(int index) const {
  // @@protoc_insertion_point(field_get:DO_CS1.enc_id.enc_val)
  return _internal_enc_val(index);
}
inline std::string* enc_id::mutable_enc_val(int index) {
  // @@protoc_insertion_point(field_mutable:DO_CS1.enc_id.enc_val)
  return _impl_.enc_val_.Mutable(index);
}
inline void enc_id::set_enc_val(int index, const std::string& value) {
  _impl_.enc_val_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:DO_CS1.enc_id.enc_val)
}
inline void enc_id::set_enc_val(int index, std::string&& value) {
  _impl_.enc_val_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:DO_CS1.enc_id.enc_val)
}
inline void enc_id::set_enc_val(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.enc_val_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:DO_CS1.enc_id.enc_val)
}
inline void enc_id::set_enc_val(int index, const char* value, size_t size) {
  _impl_.enc_val_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DO_CS1.enc_id.enc_val)
}
inline std::string* enc_id::_internal_add_enc_val() {
  return _impl_.enc_val_.Add();
}
inline void enc_id::add_enc_val(const std::string& value) {
  _impl_.enc_val_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:DO_CS1.enc_id.enc_val)
}
inline void enc_id::add_enc_val(std::string&& value) {
  _impl_.enc_val_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:DO_CS1.enc_id.enc_val)
}
inline void enc_id::add_enc_val(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.enc_val_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:DO_CS1.enc_id.enc_val)
}
inline void enc_id::add_enc_val(const char* value, size_t size) {
  _impl_.enc_val_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:DO_CS1.enc_id.enc_val)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
enc_id::enc_val() const {
  // @@protoc_insertion_point(field_list:DO_CS1.enc_id.enc_val)
  return _impl_.enc_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
enc_id::mutable_enc_val() {
  // @@protoc_insertion_point(field_mutable_list:DO_CS1.enc_id.enc_val)
  return &_impl_.enc_val_;
}

// .DO_CS1.Capsule very_val = 2;
inline bool enc_id::_internal_has_very_val() const {
  return this != internal_default_instance() && _impl_.very_val_ != nullptr;
}
inline bool enc_id::has_very_val() const {
  return _internal_has_very_val();
}
inline void enc_id::clear_very_val() {
  if (GetArenaForAllocation() == nullptr && _impl_.very_val_ != nullptr) {
    delete _impl_.very_val_;
  }
  _impl_.very_val_ = nullptr;
}
inline const ::DO_CS1::Capsule& enc_id::_internal_very_val() const {
  const ::DO_CS1::Capsule* p = _impl_.very_val_;
  return p != nullptr ? *p : reinterpret_cast<const ::DO_CS1::Capsule&>(
      ::DO_CS1::_Capsule_default_instance_);
}
inline const ::DO_CS1::Capsule& enc_id::very_val() const {
  // @@protoc_insertion_point(field_get:DO_CS1.enc_id.very_val)
  return _internal_very_val();
}
inline void enc_id::unsafe_arena_set_allocated_very_val(
    ::DO_CS1::Capsule* very_val) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.very_val_);
  }
  _impl_.very_val_ = very_val;
  if (very_val) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DO_CS1.enc_id.very_val)
}
inline ::DO_CS1::Capsule* enc_id::release_very_val() {
  
  ::DO_CS1::Capsule* temp = _impl_.very_val_;
  _impl_.very_val_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DO_CS1::Capsule* enc_id::unsafe_arena_release_very_val() {
  // @@protoc_insertion_point(field_release:DO_CS1.enc_id.very_val)
  
  ::DO_CS1::Capsule* temp = _impl_.very_val_;
  _impl_.very_val_ = nullptr;
  return temp;
}
inline ::DO_CS1::Capsule* enc_id::_internal_mutable_very_val() {
  
  if (_impl_.very_val_ == nullptr) {
    auto* p = CreateMaybeMessage<::DO_CS1::Capsule>(GetArenaForAllocation());
    _impl_.very_val_ = p;
  }
  return _impl_.very_val_;
}
inline ::DO_CS1::Capsule* enc_id::mutable_very_val() {
  ::DO_CS1::Capsule* _msg = _internal_mutable_very_val();
  // @@protoc_insertion_point(field_mutable:DO_CS1.enc_id.very_val)
  return _msg;
}
inline void enc_id::set_allocated_very_val(::DO_CS1::Capsule* very_val) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.very_val_;
  }
  if (very_val) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(very_val);
    if (message_arena != submessage_arena) {
      very_val = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, very_val, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.very_val_ = very_val;
  // @@protoc_insertion_point(field_set_allocated:DO_CS1.enc_id.very_val)
}

// -------------------------------------------------------------------

// msg_table_val

// repeated string table_content = 1;
inline int msg_table_val::_internal_table_content_size() const {
  return _impl_.table_content_.size();
}
inline int msg_table_val::table_content_size() const {
  return _internal_table_content_size();
}
inline void msg_table_val::clear_table_content() {
  _impl_.table_content_.Clear();
}
inline std::string* msg_table_val::add_table_content() {
  std::string* _s = _internal_add_table_content();
  // @@protoc_insertion_point(field_add_mutable:DO_CS1.msg.table_val.table_content)
  return _s;
}
inline const std::string& msg_table_val::_internal_table_content(int index) const {
  return _impl_.table_content_.Get(index);
}
inline const std::string& msg_table_val::table_content(int index) const {
  // @@protoc_insertion_point(field_get:DO_CS1.msg.table_val.table_content)
  return _internal_table_content(index);
}
inline std::string* msg_table_val::mutable_table_content(int index) {
  // @@protoc_insertion_point(field_mutable:DO_CS1.msg.table_val.table_content)
  return _impl_.table_content_.Mutable(index);
}
inline void msg_table_val::set_table_content(int index, const std::string& value) {
  _impl_.table_content_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:DO_CS1.msg.table_val.table_content)
}
inline void msg_table_val::set_table_content(int index, std::string&& value) {
  _impl_.table_content_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:DO_CS1.msg.table_val.table_content)
}
inline void msg_table_val::set_table_content(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.table_content_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:DO_CS1.msg.table_val.table_content)
}
inline void msg_table_val::set_table_content(int index, const char* value, size_t size) {
  _impl_.table_content_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DO_CS1.msg.table_val.table_content)
}
inline std::string* msg_table_val::_internal_add_table_content() {
  return _impl_.table_content_.Add();
}
inline void msg_table_val::add_table_content(const std::string& value) {
  _impl_.table_content_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:DO_CS1.msg.table_val.table_content)
}
inline void msg_table_val::add_table_content(std::string&& value) {
  _impl_.table_content_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:DO_CS1.msg.table_val.table_content)
}
inline void msg_table_val::add_table_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.table_content_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:DO_CS1.msg.table_val.table_content)
}
inline void msg_table_val::add_table_content(const char* value, size_t size) {
  _impl_.table_content_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:DO_CS1.msg.table_val.table_content)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
msg_table_val::table_content() const {
  // @@protoc_insertion_point(field_list:DO_CS1.msg.table_val.table_content)
  return _impl_.table_content_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
msg_table_val::mutable_table_content() {
  // @@protoc_insertion_point(field_mutable_list:DO_CS1.msg.table_val.table_content)
  return &_impl_.table_content_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// msg

// map<string, .DO_CS1.msg.table_val> mapping_table = 1;
inline int msg::_internal_mapping_table_size() const {
  return _impl_.mapping_table_.size();
}
inline int msg::mapping_table_size() const {
  return _internal_mapping_table_size();
}
inline void msg::clear_mapping_table() {
  _impl_.mapping_table_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DO_CS1::msg_table_val >&
msg::_internal_mapping_table() const {
  return _impl_.mapping_table_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DO_CS1::msg_table_val >&
msg::mapping_table() const {
  // @@protoc_insertion_point(field_map:DO_CS1.msg.mapping_table)
  return _internal_mapping_table();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DO_CS1::msg_table_val >*
msg::_internal_mutable_mapping_table() {
  return _impl_.mapping_table_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DO_CS1::msg_table_val >*
msg::mutable_mapping_table() {
  // @@protoc_insertion_point(field_mutable_map:DO_CS1.msg.mapping_table)
  return _internal_mutable_mapping_table();
}

// repeated .DO_CS1.encoding encodingList = 2;
inline int msg::_internal_encodinglist_size() const {
  return _impl_.encodinglist_.size();
}
inline int msg::encodinglist_size() const {
  return _internal_encodinglist_size();
}
inline void msg::clear_encodinglist() {
  _impl_.encodinglist_.Clear();
}
inline ::DO_CS1::encoding* msg::mutable_encodinglist(int index) {
  // @@protoc_insertion_point(field_mutable:DO_CS1.msg.encodingList)
  return _impl_.encodinglist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DO_CS1::encoding >*
msg::mutable_encodinglist() {
  // @@protoc_insertion_point(field_mutable_list:DO_CS1.msg.encodingList)
  return &_impl_.encodinglist_;
}
inline const ::DO_CS1::encoding& msg::_internal_encodinglist(int index) const {
  return _impl_.encodinglist_.Get(index);
}
inline const ::DO_CS1::encoding& msg::encodinglist(int index) const {
  // @@protoc_insertion_point(field_get:DO_CS1.msg.encodingList)
  return _internal_encodinglist(index);
}
inline ::DO_CS1::encoding* msg::_internal_add_encodinglist() {
  return _impl_.encodinglist_.Add();
}
inline ::DO_CS1::encoding* msg::add_encodinglist() {
  ::DO_CS1::encoding* _add = _internal_add_encodinglist();
  // @@protoc_insertion_point(field_add:DO_CS1.msg.encodingList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DO_CS1::encoding >&
msg::encodinglist() const {
  // @@protoc_insertion_point(field_list:DO_CS1.msg.encodingList)
  return _impl_.encodinglist_;
}

// string rk = 3;
inline void msg::clear_rk() {
  _impl_.rk_.ClearToEmpty();
}
inline const std::string& msg::rk() const {
  // @@protoc_insertion_point(field_get:DO_CS1.msg.rk)
  return _internal_rk();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void msg::set_rk(ArgT0&& arg0, ArgT... args) {
 
 _impl_.rk_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DO_CS1.msg.rk)
}
inline std::string* msg::mutable_rk() {
  std::string* _s = _internal_mutable_rk();
  // @@protoc_insertion_point(field_mutable:DO_CS1.msg.rk)
  return _s;
}
inline const std::string& msg::_internal_rk() const {
  return _impl_.rk_.Get();
}
inline void msg::_internal_set_rk(const std::string& value) {
  
  _impl_.rk_.Set(value, GetArenaForAllocation());
}
inline std::string* msg::_internal_mutable_rk() {
  
  return _impl_.rk_.Mutable(GetArenaForAllocation());
}
inline std::string* msg::release_rk() {
  // @@protoc_insertion_point(field_release:DO_CS1.msg.rk)
  return _impl_.rk_.Release();
}
inline void msg::set_allocated_rk(std::string* rk) {
  if (rk != nullptr) {
    
  } else {
    
  }
  _impl_.rk_.SetAllocated(rk, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rk_.IsDefault()) {
    _impl_.rk_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DO_CS1.msg.rk)
}

// .DO_CS1.enc_id encryptedID = 4;
inline bool msg::_internal_has_encryptedid() const {
  return this != internal_default_instance() && _impl_.encryptedid_ != nullptr;
}
inline bool msg::has_encryptedid() const {
  return _internal_has_encryptedid();
}
inline void msg::clear_encryptedid() {
  if (GetArenaForAllocation() == nullptr && _impl_.encryptedid_ != nullptr) {
    delete _impl_.encryptedid_;
  }
  _impl_.encryptedid_ = nullptr;
}
inline const ::DO_CS1::enc_id& msg::_internal_encryptedid() const {
  const ::DO_CS1::enc_id* p = _impl_.encryptedid_;
  return p != nullptr ? *p : reinterpret_cast<const ::DO_CS1::enc_id&>(
      ::DO_CS1::_enc_id_default_instance_);
}
inline const ::DO_CS1::enc_id& msg::encryptedid() const {
  // @@protoc_insertion_point(field_get:DO_CS1.msg.encryptedID)
  return _internal_encryptedid();
}
inline void msg::unsafe_arena_set_allocated_encryptedid(
    ::DO_CS1::enc_id* encryptedid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.encryptedid_);
  }
  _impl_.encryptedid_ = encryptedid;
  if (encryptedid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DO_CS1.msg.encryptedID)
}
inline ::DO_CS1::enc_id* msg::release_encryptedid() {
  
  ::DO_CS1::enc_id* temp = _impl_.encryptedid_;
  _impl_.encryptedid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DO_CS1::enc_id* msg::unsafe_arena_release_encryptedid() {
  // @@protoc_insertion_point(field_release:DO_CS1.msg.encryptedID)
  
  ::DO_CS1::enc_id* temp = _impl_.encryptedid_;
  _impl_.encryptedid_ = nullptr;
  return temp;
}
inline ::DO_CS1::enc_id* msg::_internal_mutable_encryptedid() {
  
  if (_impl_.encryptedid_ == nullptr) {
    auto* p = CreateMaybeMessage<::DO_CS1::enc_id>(GetArenaForAllocation());
    _impl_.encryptedid_ = p;
  }
  return _impl_.encryptedid_;
}
inline ::DO_CS1::enc_id* msg::mutable_encryptedid() {
  ::DO_CS1::enc_id* _msg = _internal_mutable_encryptedid();
  // @@protoc_insertion_point(field_mutable:DO_CS1.msg.encryptedID)
  return _msg;
}
inline void msg::set_allocated_encryptedid(::DO_CS1::enc_id* encryptedid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.encryptedid_;
  }
  if (encryptedid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(encryptedid);
    if (message_arena != submessage_arena) {
      encryptedid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, encryptedid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.encryptedid_ = encryptedid;
  // @@protoc_insertion_point(field_set_allocated:DO_CS1.msg.encryptedID)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace DO_CS1

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_DO_5fand_5fCS1_2eproto
