// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DO_and_QU.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_DO_5fand_5fQU_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_DO_5fand_5fQU_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_DO_5fand_5fQU_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_DO_5fand_5fQU_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_DO_5fand_5fQU_2eproto;
namespace DO_and_QU {
class ParameterReply;
struct ParameterReplyDefaultTypeInternal;
extern ParameterReplyDefaultTypeInternal _ParameterReply_default_instance_;
class PublicKeyRequest;
struct PublicKeyRequestDefaultTypeInternal;
extern PublicKeyRequestDefaultTypeInternal _PublicKeyRequest_default_instance_;
}  // namespace DO_and_QU
PROTOBUF_NAMESPACE_OPEN
template<> ::DO_and_QU::ParameterReply* Arena::CreateMaybeMessage<::DO_and_QU::ParameterReply>(Arena*);
template<> ::DO_and_QU::PublicKeyRequest* Arena::CreateMaybeMessage<::DO_and_QU::PublicKeyRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace DO_and_QU {

// ===================================================================

class PublicKeyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DO_and_QU.PublicKeyRequest) */ {
 public:
  inline PublicKeyRequest() : PublicKeyRequest(nullptr) {}
  ~PublicKeyRequest() override;
  explicit PROTOBUF_CONSTEXPR PublicKeyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublicKeyRequest(const PublicKeyRequest& from);
  PublicKeyRequest(PublicKeyRequest&& from) noexcept
    : PublicKeyRequest() {
    *this = ::std::move(from);
  }

  inline PublicKeyRequest& operator=(const PublicKeyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublicKeyRequest& operator=(PublicKeyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublicKeyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublicKeyRequest* internal_default_instance() {
    return reinterpret_cast<const PublicKeyRequest*>(
               &_PublicKeyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PublicKeyRequest& a, PublicKeyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PublicKeyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublicKeyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublicKeyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublicKeyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PublicKeyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PublicKeyRequest& from) {
    PublicKeyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublicKeyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DO_and_QU.PublicKeyRequest";
  }
  protected:
  explicit PublicKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicKeyFieldNumber = 1,
  };
  // string publicKey = 1;
  void clear_publickey();
  const std::string& publickey() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_publickey(ArgT0&& arg0, ArgT... args);
  std::string* mutable_publickey();
  PROTOBUF_NODISCARD std::string* release_publickey();
  void set_allocated_publickey(std::string* publickey);
  private:
  const std::string& _internal_publickey() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_publickey(const std::string& value);
  std::string* _internal_mutable_publickey();
  public:

  // @@protoc_insertion_point(class_scope:DO_and_QU.PublicKeyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr publickey_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_DO_5fand_5fQU_2eproto;
};
// -------------------------------------------------------------------

class ParameterReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DO_and_QU.ParameterReply) */ {
 public:
  inline ParameterReply() : ParameterReply(nullptr) {}
  ~ParameterReply() override;
  explicit PROTOBUF_CONSTEXPR ParameterReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ParameterReply(const ParameterReply& from);
  ParameterReply(ParameterReply&& from) noexcept
    : ParameterReply() {
    *this = ::std::move(from);
  }

  inline ParameterReply& operator=(const ParameterReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParameterReply& operator=(ParameterReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ParameterReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const ParameterReply* internal_default_instance() {
    return reinterpret_cast<const ParameterReply*>(
               &_ParameterReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ParameterReply& a, ParameterReply& b) {
    a.Swap(&b);
  }
  inline void Swap(ParameterReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParameterReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ParameterReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ParameterReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ParameterReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ParameterReply& from) {
    ParameterReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParameterReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DO_and_QU.ParameterReply";
  }
  protected:
  explicit ParameterReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParameterFieldNumber = 1,
  };
  // repeated string parameter = 1;
  int parameter_size() const;
  private:
  int _internal_parameter_size() const;
  public:
  void clear_parameter();
  const std::string& parameter(int index) const;
  std::string* mutable_parameter(int index);
  void set_parameter(int index, const std::string& value);
  void set_parameter(int index, std::string&& value);
  void set_parameter(int index, const char* value);
  void set_parameter(int index, const char* value, size_t size);
  std::string* add_parameter();
  void add_parameter(const std::string& value);
  void add_parameter(std::string&& value);
  void add_parameter(const char* value);
  void add_parameter(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& parameter() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_parameter();
  private:
  const std::string& _internal_parameter(int index) const;
  std::string* _internal_add_parameter();
  public:

  // @@protoc_insertion_point(class_scope:DO_and_QU.ParameterReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> parameter_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_DO_5fand_5fQU_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PublicKeyRequest

// string publicKey = 1;
inline void PublicKeyRequest::clear_publickey() {
  _impl_.publickey_.ClearToEmpty();
}
inline const std::string& PublicKeyRequest::publickey() const {
  // @@protoc_insertion_point(field_get:DO_and_QU.PublicKeyRequest.publicKey)
  return _internal_publickey();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PublicKeyRequest::set_publickey(ArgT0&& arg0, ArgT... args) {
 
 _impl_.publickey_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DO_and_QU.PublicKeyRequest.publicKey)
}
inline std::string* PublicKeyRequest::mutable_publickey() {
  std::string* _s = _internal_mutable_publickey();
  // @@protoc_insertion_point(field_mutable:DO_and_QU.PublicKeyRequest.publicKey)
  return _s;
}
inline const std::string& PublicKeyRequest::_internal_publickey() const {
  return _impl_.publickey_.Get();
}
inline void PublicKeyRequest::_internal_set_publickey(const std::string& value) {
  
  _impl_.publickey_.Set(value, GetArenaForAllocation());
}
inline std::string* PublicKeyRequest::_internal_mutable_publickey() {
  
  return _impl_.publickey_.Mutable(GetArenaForAllocation());
}
inline std::string* PublicKeyRequest::release_publickey() {
  // @@protoc_insertion_point(field_release:DO_and_QU.PublicKeyRequest.publicKey)
  return _impl_.publickey_.Release();
}
inline void PublicKeyRequest::set_allocated_publickey(std::string* publickey) {
  if (publickey != nullptr) {
    
  } else {
    
  }
  _impl_.publickey_.SetAllocated(publickey, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.publickey_.IsDefault()) {
    _impl_.publickey_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DO_and_QU.PublicKeyRequest.publicKey)
}

// -------------------------------------------------------------------

// ParameterReply

// repeated string parameter = 1;
inline int ParameterReply::_internal_parameter_size() const {
  return _impl_.parameter_.size();
}
inline int ParameterReply::parameter_size() const {
  return _internal_parameter_size();
}
inline void ParameterReply::clear_parameter() {
  _impl_.parameter_.Clear();
}
inline std::string* ParameterReply::add_parameter() {
  std::string* _s = _internal_add_parameter();
  // @@protoc_insertion_point(field_add_mutable:DO_and_QU.ParameterReply.parameter)
  return _s;
}
inline const std::string& ParameterReply::_internal_parameter(int index) const {
  return _impl_.parameter_.Get(index);
}
inline const std::string& ParameterReply::parameter(int index) const {
  // @@protoc_insertion_point(field_get:DO_and_QU.ParameterReply.parameter)
  return _internal_parameter(index);
}
inline std::string* ParameterReply::mutable_parameter(int index) {
  // @@protoc_insertion_point(field_mutable:DO_and_QU.ParameterReply.parameter)
  return _impl_.parameter_.Mutable(index);
}
inline void ParameterReply::set_parameter(int index, const std::string& value) {
  _impl_.parameter_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:DO_and_QU.ParameterReply.parameter)
}
inline void ParameterReply::set_parameter(int index, std::string&& value) {
  _impl_.parameter_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:DO_and_QU.ParameterReply.parameter)
}
inline void ParameterReply::set_parameter(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.parameter_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:DO_and_QU.ParameterReply.parameter)
}
inline void ParameterReply::set_parameter(int index, const char* value, size_t size) {
  _impl_.parameter_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DO_and_QU.ParameterReply.parameter)
}
inline std::string* ParameterReply::_internal_add_parameter() {
  return _impl_.parameter_.Add();
}
inline void ParameterReply::add_parameter(const std::string& value) {
  _impl_.parameter_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:DO_and_QU.ParameterReply.parameter)
}
inline void ParameterReply::add_parameter(std::string&& value) {
  _impl_.parameter_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:DO_and_QU.ParameterReply.parameter)
}
inline void ParameterReply::add_parameter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.parameter_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:DO_and_QU.ParameterReply.parameter)
}
inline void ParameterReply::add_parameter(const char* value, size_t size) {
  _impl_.parameter_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:DO_and_QU.ParameterReply.parameter)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ParameterReply::parameter() const {
  // @@protoc_insertion_point(field_list:DO_and_QU.ParameterReply.parameter)
  return _impl_.parameter_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ParameterReply::mutable_parameter() {
  // @@protoc_insertion_point(field_mutable_list:DO_and_QU.ParameterReply.parameter)
  return &_impl_.parameter_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace DO_and_QU

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_DO_5fand_5fQU_2eproto
