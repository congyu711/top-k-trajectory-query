// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DO_and_CS1.proto

#include "DO_and_CS1.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace DO_CS1 {
PROTOBUF_CONSTEXPR track::track(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hil_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.time_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct trackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR trackDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~trackDefaultTypeInternal() {}
  union {
    track _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 trackDefaultTypeInternal _track_default_instance_;
PROTOBUF_CONSTEXPR encoding::encoding(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.encoded_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct encodingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR encodingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~encodingDefaultTypeInternal() {}
  union {
    encoding _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 encodingDefaultTypeInternal _encoding_default_instance_;
PROTOBUF_CONSTEXPR Capsule::Capsule(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x1_)*/0
  , /*decltype(_impl_.x2_)*/0
  , /*decltype(_impl_.x3_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CapsuleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CapsuleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CapsuleDefaultTypeInternal() {}
  union {
    Capsule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CapsuleDefaultTypeInternal _Capsule_default_instance_;
PROTOBUF_CONSTEXPR enc_id::enc_id(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.enc_val_)*/{}
  , /*decltype(_impl_.very_val_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct enc_idDefaultTypeInternal {
  PROTOBUF_CONSTEXPR enc_idDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~enc_idDefaultTypeInternal() {}
  union {
    enc_id _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 enc_idDefaultTypeInternal _enc_id_default_instance_;
PROTOBUF_CONSTEXPR msg_table_val::msg_table_val(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.table_content_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct msg_table_valDefaultTypeInternal {
  PROTOBUF_CONSTEXPR msg_table_valDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~msg_table_valDefaultTypeInternal() {}
  union {
    msg_table_val _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 msg_table_valDefaultTypeInternal _msg_table_val_default_instance_;
PROTOBUF_CONSTEXPR msg_MappingTableEntry_DoNotUse::msg_MappingTableEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct msg_MappingTableEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR msg_MappingTableEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~msg_MappingTableEntry_DoNotUseDefaultTypeInternal() {}
  union {
    msg_MappingTableEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 msg_MappingTableEntry_DoNotUseDefaultTypeInternal _msg_MappingTableEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR msg::msg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mapping_table_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.encodinglist_)*/{}
  , /*decltype(_impl_.rk_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.encryptedid_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct msgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR msgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~msgDefaultTypeInternal() {}
  union {
    msg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 msgDefaultTypeInternal _msg_default_instance_;
}  // namespace DO_CS1
static ::_pb::Metadata file_level_metadata_DO_5fand_5fCS1_2eproto[7];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_DO_5fand_5fCS1_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_DO_5fand_5fCS1_2eproto = nullptr;

const uint32_t TableStruct_DO_5fand_5fCS1_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DO_CS1::track, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DO_CS1::track, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::DO_CS1::track, _impl_.hil_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DO_CS1::encoding, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DO_CS1::encoding, _impl_.encoded_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DO_CS1::Capsule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DO_CS1::Capsule, _impl_.x1_),
  PROTOBUF_FIELD_OFFSET(::DO_CS1::Capsule, _impl_.x2_),
  PROTOBUF_FIELD_OFFSET(::DO_CS1::Capsule, _impl_.x3_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DO_CS1::enc_id, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DO_CS1::enc_id, _impl_.enc_val_),
  PROTOBUF_FIELD_OFFSET(::DO_CS1::enc_id, _impl_.very_val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DO_CS1::msg_table_val, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DO_CS1::msg_table_val, _impl_.table_content_),
  PROTOBUF_FIELD_OFFSET(::DO_CS1::msg_MappingTableEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::DO_CS1::msg_MappingTableEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DO_CS1::msg_MappingTableEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::DO_CS1::msg_MappingTableEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DO_CS1::msg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DO_CS1::msg, _impl_.mapping_table_),
  PROTOBUF_FIELD_OFFSET(::DO_CS1::msg, _impl_.encodinglist_),
  PROTOBUF_FIELD_OFFSET(::DO_CS1::msg, _impl_.rk_),
  PROTOBUF_FIELD_OFFSET(::DO_CS1::msg, _impl_.encryptedid_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::DO_CS1::track)},
  { 8, -1, -1, sizeof(::DO_CS1::encoding)},
  { 15, -1, -1, sizeof(::DO_CS1::Capsule)},
  { 24, -1, -1, sizeof(::DO_CS1::enc_id)},
  { 32, -1, -1, sizeof(::DO_CS1::msg_table_val)},
  { 39, 47, -1, sizeof(::DO_CS1::msg_MappingTableEntry_DoNotUse)},
  { 49, -1, -1, sizeof(::DO_CS1::msg)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::DO_CS1::_track_default_instance_._instance,
  &::DO_CS1::_encoding_default_instance_._instance,
  &::DO_CS1::_Capsule_default_instance_._instance,
  &::DO_CS1::_enc_id_default_instance_._instance,
  &::DO_CS1::_msg_table_val_default_instance_._instance,
  &::DO_CS1::_msg_MappingTableEntry_DoNotUse_default_instance_._instance,
  &::DO_CS1::_msg_default_instance_._instance,
};

const char descriptor_table_protodef_DO_5fand_5fCS1_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020DO_and_CS1.proto\022\006DO_CS1\032\033google/proto"
  "buf/empty.proto\"\"\n\005track\022\014\n\004time\030\001 \001(\001\022\013"
  "\n\003hil\030\002 \001(\t\"*\n\010encoding\022\036\n\007encoded\030\001 \003(\013"
  "2\r.DO_CS1.track\"-\n\007Capsule\022\n\n\002x1\030\001 \001(\005\022\n"
  "\n\002x2\030\002 \001(\005\022\n\n\002x3\030\003 \001(\005\"<\n\006enc_id\022\017\n\007enc_"
  "val\030\001 \003(\t\022!\n\010very_val\030\002 \001(\0132\017.DO_CS1.Cap"
  "sule\"\204\002\n\003msg\0224\n\rmapping_table\030\001 \003(\0132\035.DO"
  "_CS1.msg.MappingTableEntry\022&\n\014encodingLi"
  "st\030\002 \003(\0132\020.DO_CS1.encoding\022\n\n\002rk\030\003 \001(\t\022#"
  "\n\013encryptedID\030\004 \001(\0132\016.DO_CS1.enc_id\032\"\n\tt"
  "able_val\022\025\n\rtable_content\030\001 \003(\t\032J\n\021Mappi"
  "ngTableEntry\022\013\n\003key\030\001 \001(\t\022$\n\005value\030\002 \001(\013"
  "2\025.DO_CS1.msg.table_val:\0028\0012\?\n\007Greeter\0224"
  "\n\013SeedMessage\022\013.DO_CS1.msg\032\026.google.prot"
  "obuf.Empty\"\000b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_DO_5fand_5fCS1_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::_pbi::once_flag descriptor_table_DO_5fand_5fCS1_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_DO_5fand_5fCS1_2eproto = {
    false, false, 580, descriptor_table_protodef_DO_5fand_5fCS1_2eproto,
    "DO_and_CS1.proto",
    &descriptor_table_DO_5fand_5fCS1_2eproto_once, descriptor_table_DO_5fand_5fCS1_2eproto_deps, 1, 7,
    schemas, file_default_instances, TableStruct_DO_5fand_5fCS1_2eproto::offsets,
    file_level_metadata_DO_5fand_5fCS1_2eproto, file_level_enum_descriptors_DO_5fand_5fCS1_2eproto,
    file_level_service_descriptors_DO_5fand_5fCS1_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_DO_5fand_5fCS1_2eproto_getter() {
  return &descriptor_table_DO_5fand_5fCS1_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_DO_5fand_5fCS1_2eproto(&descriptor_table_DO_5fand_5fCS1_2eproto);
namespace DO_CS1 {

// ===================================================================

class track::_Internal {
 public:
};

track::track(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DO_CS1.track)
}
track::track(const track& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  track* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hil_){}
    , decltype(_impl_.time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.hil_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hil_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hil().empty()) {
    _this->_impl_.hil_.Set(from._internal_hil(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.time_ = from._impl_.time_;
  // @@protoc_insertion_point(copy_constructor:DO_CS1.track)
}

inline void track::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hil_){}
    , decltype(_impl_.time_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.hil_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hil_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

track::~track() {
  // @@protoc_insertion_point(destructor:DO_CS1.track)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void track::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hil_.Destroy();
}

void track::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void track::Clear() {
// @@protoc_insertion_point(message_clear_start:DO_CS1.track)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hil_.ClearToEmpty();
  _impl_.time_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* track::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string hil = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_hil();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "DO_CS1.track.hil"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* track::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DO_CS1.track)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double time = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_time = this->_internal_time();
  uint64_t raw_time;
  memcpy(&raw_time, &tmp_time, sizeof(tmp_time));
  if (raw_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_time(), target);
  }

  // string hil = 2;
  if (!this->_internal_hil().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hil().data(), static_cast<int>(this->_internal_hil().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DO_CS1.track.hil");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_hil(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DO_CS1.track)
  return target;
}

size_t track::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DO_CS1.track)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string hil = 2;
  if (!this->_internal_hil().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hil());
  }

  // double time = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_time = this->_internal_time();
  uint64_t raw_time;
  memcpy(&raw_time, &tmp_time, sizeof(tmp_time));
  if (raw_time != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData track::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    track::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*track::GetClassData() const { return &_class_data_; }


void track::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<track*>(&to_msg);
  auto& from = static_cast<const track&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DO_CS1.track)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_hil().empty()) {
    _this->_internal_set_hil(from._internal_hil());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_time = from._internal_time();
  uint64_t raw_time;
  memcpy(&raw_time, &tmp_time, sizeof(tmp_time));
  if (raw_time != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void track::CopyFrom(const track& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DO_CS1.track)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool track::IsInitialized() const {
  return true;
}

void track::InternalSwap(track* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hil_, lhs_arena,
      &other->_impl_.hil_, rhs_arena
  );
  swap(_impl_.time_, other->_impl_.time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata track::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DO_5fand_5fCS1_2eproto_getter, &descriptor_table_DO_5fand_5fCS1_2eproto_once,
      file_level_metadata_DO_5fand_5fCS1_2eproto[0]);
}

// ===================================================================

class encoding::_Internal {
 public:
};

encoding::encoding(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DO_CS1.encoding)
}
encoding::encoding(const encoding& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  encoding* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.encoded_){from._impl_.encoded_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DO_CS1.encoding)
}

inline void encoding::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.encoded_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

encoding::~encoding() {
  // @@protoc_insertion_point(destructor:DO_CS1.encoding)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void encoding::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.encoded_.~RepeatedPtrField();
}

void encoding::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void encoding::Clear() {
// @@protoc_insertion_point(message_clear_start:DO_CS1.encoding)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.encoded_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* encoding::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .DO_CS1.track encoded = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_encoded(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* encoding::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DO_CS1.encoding)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DO_CS1.track encoded = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_encoded_size()); i < n; i++) {
    const auto& repfield = this->_internal_encoded(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DO_CS1.encoding)
  return target;
}

size_t encoding::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DO_CS1.encoding)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DO_CS1.track encoded = 1;
  total_size += 1UL * this->_internal_encoded_size();
  for (const auto& msg : this->_impl_.encoded_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData encoding::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    encoding::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*encoding::GetClassData() const { return &_class_data_; }


void encoding::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<encoding*>(&to_msg);
  auto& from = static_cast<const encoding&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DO_CS1.encoding)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.encoded_.MergeFrom(from._impl_.encoded_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void encoding::CopyFrom(const encoding& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DO_CS1.encoding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool encoding::IsInitialized() const {
  return true;
}

void encoding::InternalSwap(encoding* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.encoded_.InternalSwap(&other->_impl_.encoded_);
}

::PROTOBUF_NAMESPACE_ID::Metadata encoding::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DO_5fand_5fCS1_2eproto_getter, &descriptor_table_DO_5fand_5fCS1_2eproto_once,
      file_level_metadata_DO_5fand_5fCS1_2eproto[1]);
}

// ===================================================================

class Capsule::_Internal {
 public:
};

Capsule::Capsule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DO_CS1.Capsule)
}
Capsule::Capsule(const Capsule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Capsule* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x1_){}
    , decltype(_impl_.x2_){}
    , decltype(_impl_.x3_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x1_, &from._impl_.x1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.x3_) -
    reinterpret_cast<char*>(&_impl_.x1_)) + sizeof(_impl_.x3_));
  // @@protoc_insertion_point(copy_constructor:DO_CS1.Capsule)
}

inline void Capsule::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x1_){0}
    , decltype(_impl_.x2_){0}
    , decltype(_impl_.x3_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Capsule::~Capsule() {
  // @@protoc_insertion_point(destructor:DO_CS1.Capsule)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Capsule::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Capsule::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Capsule::Clear() {
// @@protoc_insertion_point(message_clear_start:DO_CS1.Capsule)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.x3_) -
      reinterpret_cast<char*>(&_impl_.x1_)) + sizeof(_impl_.x3_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Capsule::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 x1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.x1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 x2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.x2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 x3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.x3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Capsule::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DO_CS1.Capsule)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x1 = 1;
  if (this->_internal_x1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_x1(), target);
  }

  // int32 x2 = 2;
  if (this->_internal_x2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_x2(), target);
  }

  // int32 x3 = 3;
  if (this->_internal_x3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_x3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DO_CS1.Capsule)
  return target;
}

size_t Capsule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DO_CS1.Capsule)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x1 = 1;
  if (this->_internal_x1() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x1());
  }

  // int32 x2 = 2;
  if (this->_internal_x2() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x2());
  }

  // int32 x3 = 3;
  if (this->_internal_x3() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x3());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Capsule::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Capsule::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Capsule::GetClassData() const { return &_class_data_; }


void Capsule::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Capsule*>(&to_msg);
  auto& from = static_cast<const Capsule&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DO_CS1.Capsule)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x1() != 0) {
    _this->_internal_set_x1(from._internal_x1());
  }
  if (from._internal_x2() != 0) {
    _this->_internal_set_x2(from._internal_x2());
  }
  if (from._internal_x3() != 0) {
    _this->_internal_set_x3(from._internal_x3());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Capsule::CopyFrom(const Capsule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DO_CS1.Capsule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Capsule::IsInitialized() const {
  return true;
}

void Capsule::InternalSwap(Capsule* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Capsule, _impl_.x3_)
      + sizeof(Capsule::_impl_.x3_)
      - PROTOBUF_FIELD_OFFSET(Capsule, _impl_.x1_)>(
          reinterpret_cast<char*>(&_impl_.x1_),
          reinterpret_cast<char*>(&other->_impl_.x1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Capsule::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DO_5fand_5fCS1_2eproto_getter, &descriptor_table_DO_5fand_5fCS1_2eproto_once,
      file_level_metadata_DO_5fand_5fCS1_2eproto[2]);
}

// ===================================================================

class enc_id::_Internal {
 public:
  static const ::DO_CS1::Capsule& very_val(const enc_id* msg);
};

const ::DO_CS1::Capsule&
enc_id::_Internal::very_val(const enc_id* msg) {
  return *msg->_impl_.very_val_;
}
enc_id::enc_id(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DO_CS1.enc_id)
}
enc_id::enc_id(const enc_id& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  enc_id* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.enc_val_){from._impl_.enc_val_}
    , decltype(_impl_.very_val_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_very_val()) {
    _this->_impl_.very_val_ = new ::DO_CS1::Capsule(*from._impl_.very_val_);
  }
  // @@protoc_insertion_point(copy_constructor:DO_CS1.enc_id)
}

inline void enc_id::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.enc_val_){arena}
    , decltype(_impl_.very_val_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

enc_id::~enc_id() {
  // @@protoc_insertion_point(destructor:DO_CS1.enc_id)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void enc_id::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.enc_val_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.very_val_;
}

void enc_id::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void enc_id::Clear() {
// @@protoc_insertion_point(message_clear_start:DO_CS1.enc_id)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.enc_val_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.very_val_ != nullptr) {
    delete _impl_.very_val_;
  }
  _impl_.very_val_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* enc_id::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string enc_val = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_enc_val();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "DO_CS1.enc_id.enc_val"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .DO_CS1.Capsule very_val = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_very_val(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* enc_id::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DO_CS1.enc_id)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string enc_val = 1;
  for (int i = 0, n = this->_internal_enc_val_size(); i < n; i++) {
    const auto& s = this->_internal_enc_val(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DO_CS1.enc_id.enc_val");
    target = stream->WriteString(1, s, target);
  }

  // .DO_CS1.Capsule very_val = 2;
  if (this->_internal_has_very_val()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::very_val(this),
        _Internal::very_val(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DO_CS1.enc_id)
  return target;
}

size_t enc_id::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DO_CS1.enc_id)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string enc_val = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.enc_val_.size());
  for (int i = 0, n = _impl_.enc_val_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.enc_val_.Get(i));
  }

  // .DO_CS1.Capsule very_val = 2;
  if (this->_internal_has_very_val()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.very_val_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData enc_id::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    enc_id::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*enc_id::GetClassData() const { return &_class_data_; }


void enc_id::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<enc_id*>(&to_msg);
  auto& from = static_cast<const enc_id&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DO_CS1.enc_id)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.enc_val_.MergeFrom(from._impl_.enc_val_);
  if (from._internal_has_very_val()) {
    _this->_internal_mutable_very_val()->::DO_CS1::Capsule::MergeFrom(
        from._internal_very_val());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void enc_id::CopyFrom(const enc_id& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DO_CS1.enc_id)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool enc_id::IsInitialized() const {
  return true;
}

void enc_id::InternalSwap(enc_id* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.enc_val_.InternalSwap(&other->_impl_.enc_val_);
  swap(_impl_.very_val_, other->_impl_.very_val_);
}

::PROTOBUF_NAMESPACE_ID::Metadata enc_id::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DO_5fand_5fCS1_2eproto_getter, &descriptor_table_DO_5fand_5fCS1_2eproto_once,
      file_level_metadata_DO_5fand_5fCS1_2eproto[3]);
}

// ===================================================================

class msg_table_val::_Internal {
 public:
};

msg_table_val::msg_table_val(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DO_CS1.msg.table_val)
}
msg_table_val::msg_table_val(const msg_table_val& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  msg_table_val* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.table_content_){from._impl_.table_content_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DO_CS1.msg.table_val)
}

inline void msg_table_val::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.table_content_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

msg_table_val::~msg_table_val() {
  // @@protoc_insertion_point(destructor:DO_CS1.msg.table_val)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void msg_table_val::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.table_content_.~RepeatedPtrField();
}

void msg_table_val::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void msg_table_val::Clear() {
// @@protoc_insertion_point(message_clear_start:DO_CS1.msg.table_val)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.table_content_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msg_table_val::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string table_content = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_table_content();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "DO_CS1.msg.table_val.table_content"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* msg_table_val::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DO_CS1.msg.table_val)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string table_content = 1;
  for (int i = 0, n = this->_internal_table_content_size(); i < n; i++) {
    const auto& s = this->_internal_table_content(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DO_CS1.msg.table_val.table_content");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DO_CS1.msg.table_val)
  return target;
}

size_t msg_table_val::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DO_CS1.msg.table_val)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string table_content = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.table_content_.size());
  for (int i = 0, n = _impl_.table_content_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.table_content_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData msg_table_val::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    msg_table_val::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*msg_table_val::GetClassData() const { return &_class_data_; }


void msg_table_val::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<msg_table_val*>(&to_msg);
  auto& from = static_cast<const msg_table_val&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DO_CS1.msg.table_val)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.table_content_.MergeFrom(from._impl_.table_content_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void msg_table_val::CopyFrom(const msg_table_val& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DO_CS1.msg.table_val)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_table_val::IsInitialized() const {
  return true;
}

void msg_table_val::InternalSwap(msg_table_val* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.table_content_.InternalSwap(&other->_impl_.table_content_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg_table_val::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DO_5fand_5fCS1_2eproto_getter, &descriptor_table_DO_5fand_5fCS1_2eproto_once,
      file_level_metadata_DO_5fand_5fCS1_2eproto[4]);
}

// ===================================================================

msg_MappingTableEntry_DoNotUse::msg_MappingTableEntry_DoNotUse() {}
msg_MappingTableEntry_DoNotUse::msg_MappingTableEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void msg_MappingTableEntry_DoNotUse::MergeFrom(const msg_MappingTableEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata msg_MappingTableEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DO_5fand_5fCS1_2eproto_getter, &descriptor_table_DO_5fand_5fCS1_2eproto_once,
      file_level_metadata_DO_5fand_5fCS1_2eproto[5]);
}

// ===================================================================

class msg::_Internal {
 public:
  static const ::DO_CS1::enc_id& encryptedid(const msg* msg);
};

const ::DO_CS1::enc_id&
msg::_Internal::encryptedid(const msg* msg) {
  return *msg->_impl_.encryptedid_;
}
msg::msg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &msg::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:DO_CS1.msg)
}
msg::msg(const msg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  msg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.mapping_table_)*/{}
    , decltype(_impl_.encodinglist_){from._impl_.encodinglist_}
    , decltype(_impl_.rk_){}
    , decltype(_impl_.encryptedid_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.mapping_table_.MergeFrom(from._impl_.mapping_table_);
  _impl_.rk_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rk_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rk().empty()) {
    _this->_impl_.rk_.Set(from._internal_rk(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_encryptedid()) {
    _this->_impl_.encryptedid_ = new ::DO_CS1::enc_id(*from._impl_.encryptedid_);
  }
  // @@protoc_insertion_point(copy_constructor:DO_CS1.msg)
}

inline void msg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.mapping_table_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.encodinglist_){arena}
    , decltype(_impl_.rk_){}
    , decltype(_impl_.encryptedid_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.rk_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rk_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

msg::~msg() {
  // @@protoc_insertion_point(destructor:DO_CS1.msg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void msg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mapping_table_.Destruct();
  _impl_.mapping_table_.~MapField();
  _impl_.encodinglist_.~RepeatedPtrField();
  _impl_.rk_.Destroy();
  if (this != internal_default_instance()) delete _impl_.encryptedid_;
}

void msg::ArenaDtor(void* object) {
  msg* _this = reinterpret_cast< msg* >(object);
  _this->_impl_.mapping_table_.Destruct();
}
void msg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void msg::Clear() {
// @@protoc_insertion_point(message_clear_start:DO_CS1.msg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mapping_table_.Clear();
  _impl_.encodinglist_.Clear();
  _impl_.rk_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.encryptedid_ != nullptr) {
    delete _impl_.encryptedid_;
  }
  _impl_.encryptedid_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* msg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .DO_CS1.msg.table_val> mapping_table = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.mapping_table_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .DO_CS1.encoding encodingList = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_encodinglist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string rk = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_rk();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "DO_CS1.msg.rk"));
        } else
          goto handle_unusual;
        continue;
      // .DO_CS1.enc_id encryptedID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_encryptedid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* msg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DO_CS1.msg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .DO_CS1.msg.table_val> mapping_table = 1;
  if (!this->_internal_mapping_table().empty()) {
    using MapType = ::_pb::Map<std::string, ::DO_CS1::msg_table_val>;
    using WireHelper = msg_MappingTableEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_mapping_table();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "DO_CS1.msg.MappingTableEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // repeated .DO_CS1.encoding encodingList = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_encodinglist_size()); i < n; i++) {
    const auto& repfield = this->_internal_encodinglist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string rk = 3;
  if (!this->_internal_rk().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rk().data(), static_cast<int>(this->_internal_rk().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DO_CS1.msg.rk");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_rk(), target);
  }

  // .DO_CS1.enc_id encryptedID = 4;
  if (this->_internal_has_encryptedid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::encryptedid(this),
        _Internal::encryptedid(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DO_CS1.msg)
  return target;
}

size_t msg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DO_CS1.msg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .DO_CS1.msg.table_val> mapping_table = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mapping_table_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DO_CS1::msg_table_val >::const_iterator
      it = this->_internal_mapping_table().begin();
      it != this->_internal_mapping_table().end(); ++it) {
    total_size += msg_MappingTableEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .DO_CS1.encoding encodingList = 2;
  total_size += 1UL * this->_internal_encodinglist_size();
  for (const auto& msg : this->_impl_.encodinglist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string rk = 3;
  if (!this->_internal_rk().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rk());
  }

  // .DO_CS1.enc_id encryptedID = 4;
  if (this->_internal_has_encryptedid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.encryptedid_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData msg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    msg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*msg::GetClassData() const { return &_class_data_; }


void msg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<msg*>(&to_msg);
  auto& from = static_cast<const msg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DO_CS1.msg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.mapping_table_.MergeFrom(from._impl_.mapping_table_);
  _this->_impl_.encodinglist_.MergeFrom(from._impl_.encodinglist_);
  if (!from._internal_rk().empty()) {
    _this->_internal_set_rk(from._internal_rk());
  }
  if (from._internal_has_encryptedid()) {
    _this->_internal_mutable_encryptedid()->::DO_CS1::enc_id::MergeFrom(
        from._internal_encryptedid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void msg::CopyFrom(const msg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DO_CS1.msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg::IsInitialized() const {
  return true;
}

void msg::InternalSwap(msg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.mapping_table_.InternalSwap(&other->_impl_.mapping_table_);
  _impl_.encodinglist_.InternalSwap(&other->_impl_.encodinglist_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rk_, lhs_arena,
      &other->_impl_.rk_, rhs_arena
  );
  swap(_impl_.encryptedid_, other->_impl_.encryptedid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata msg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DO_5fand_5fCS1_2eproto_getter, &descriptor_table_DO_5fand_5fCS1_2eproto_once,
      file_level_metadata_DO_5fand_5fCS1_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace DO_CS1
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::DO_CS1::track*
Arena::CreateMaybeMessage< ::DO_CS1::track >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DO_CS1::track >(arena);
}
template<> PROTOBUF_NOINLINE ::DO_CS1::encoding*
Arena::CreateMaybeMessage< ::DO_CS1::encoding >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DO_CS1::encoding >(arena);
}
template<> PROTOBUF_NOINLINE ::DO_CS1::Capsule*
Arena::CreateMaybeMessage< ::DO_CS1::Capsule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DO_CS1::Capsule >(arena);
}
template<> PROTOBUF_NOINLINE ::DO_CS1::enc_id*
Arena::CreateMaybeMessage< ::DO_CS1::enc_id >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DO_CS1::enc_id >(arena);
}
template<> PROTOBUF_NOINLINE ::DO_CS1::msg_table_val*
Arena::CreateMaybeMessage< ::DO_CS1::msg_table_val >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DO_CS1::msg_table_val >(arena);
}
template<> PROTOBUF_NOINLINE ::DO_CS1::msg_MappingTableEntry_DoNotUse*
Arena::CreateMaybeMessage< ::DO_CS1::msg_MappingTableEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DO_CS1::msg_MappingTableEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::DO_CS1::msg*
Arena::CreateMaybeMessage< ::DO_CS1::msg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DO_CS1::msg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
