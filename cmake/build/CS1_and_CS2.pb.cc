// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CS1_and_CS2.proto

#include "CS1_and_CS2.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace CS1_CS2 {
PROTOBUF_CONSTEXPR track_Sel::track_Sel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dis_)*/0
  , /*decltype(_impl_.lable_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct track_SelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR track_SelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~track_SelDefaultTypeInternal() {}
  union {
    track_Sel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 track_SelDefaultTypeInternal _track_Sel_default_instance_;
PROTOBUF_CONSTEXPR synDist::synDist(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dis_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct synDistDefaultTypeInternal {
  PROTOBUF_CONSTEXPR synDistDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~synDistDefaultTypeInternal() {}
  union {
    synDist _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 synDistDefaultTypeInternal _synDist_default_instance_;
PROTOBUF_CONSTEXPR PreResults::PreResults(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.esd_)*/{}
  , /*decltype(_impl_.kid_)*/{}
  , /*decltype(_impl_.distlist_)*/{}
  , /*decltype(_impl_.k_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PreResultsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PreResultsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PreResultsDefaultTypeInternal() {}
  union {
    PreResults _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PreResultsDefaultTypeInternal _PreResults_default_instance_;
PROTOBUF_CONSTEXPR ExactResult::ExactResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.kid_)*/{}
  , /*decltype(_impl_.mindis_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExactResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExactResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExactResultDefaultTypeInternal() {}
  union {
    ExactResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExactResultDefaultTypeInternal _ExactResult_default_instance_;
}  // namespace CS1_CS2
static ::_pb::Metadata file_level_metadata_CS1_5fand_5fCS2_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_CS1_5fand_5fCS2_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_CS1_5fand_5fCS2_2eproto = nullptr;

const uint32_t TableStruct_CS1_5fand_5fCS2_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CS1_CS2::track_Sel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CS1_CS2::track_Sel, _impl_.dis_),
  PROTOBUF_FIELD_OFFSET(::CS1_CS2::track_Sel, _impl_.lable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CS1_CS2::synDist, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CS1_CS2::synDist, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::CS1_CS2::synDist, _impl_.dis_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CS1_CS2::PreResults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CS1_CS2::PreResults, _impl_.k_),
  PROTOBUF_FIELD_OFFSET(::CS1_CS2::PreResults, _impl_.esd_),
  PROTOBUF_FIELD_OFFSET(::CS1_CS2::PreResults, _impl_.kid_),
  PROTOBUF_FIELD_OFFSET(::CS1_CS2::PreResults, _impl_.distlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CS1_CS2::ExactResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CS1_CS2::ExactResult, _impl_.kid_),
  PROTOBUF_FIELD_OFFSET(::CS1_CS2::ExactResult, _impl_.mindis_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::CS1_CS2::track_Sel)},
  { 8, -1, -1, sizeof(::CS1_CS2::synDist)},
  { 16, -1, -1, sizeof(::CS1_CS2::PreResults)},
  { 26, -1, -1, sizeof(::CS1_CS2::ExactResult)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::CS1_CS2::_track_Sel_default_instance_._instance,
  &::CS1_CS2::_synDist_default_instance_._instance,
  &::CS1_CS2::_PreResults_default_instance_._instance,
  &::CS1_CS2::_ExactResult_default_instance_._instance,
};

const char descriptor_table_protodef_CS1_5fand_5fCS2_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021CS1_and_CS2.proto\022\007CS1_CS2\"\'\n\ttrack_Se"
  "l\022\013\n\003dis\030\001 \001(\001\022\r\n\005lable\030\002 \001(\005\"#\n\007synDist"
  "\022\013\n\003key\030\001 \001(\t\022\013\n\003dis\030\002 \001(\001\"i\n\nPreResults"
  "\022\t\n\001k\030\001 \001(\005\022\013\n\003ESD\030\002 \003(\t\022\037\n\003KID\030\003 \003(\0132\022."
  "CS1_CS2.track_Sel\022\"\n\010distlist\030\004 \003(\0132\020.CS"
  "1_CS2.synDist\">\n\013ExactResult\022\037\n\003kid\030\001 \003("
  "\0132\022.CS1_CS2.track_Sel\022\016\n\006mindis\030\002 \003(\0012D\n"
  "\007Greeter\0229\n\nexactQuery\022\023.CS1_CS2.PreResu"
  "lts\032\024.CS1_CS2.ExactResult\"\000b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_CS1_5fand_5fCS2_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_CS1_5fand_5fCS2_2eproto = {
    false, false, 355, descriptor_table_protodef_CS1_5fand_5fCS2_2eproto,
    "CS1_and_CS2.proto",
    &descriptor_table_CS1_5fand_5fCS2_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_CS1_5fand_5fCS2_2eproto::offsets,
    file_level_metadata_CS1_5fand_5fCS2_2eproto, file_level_enum_descriptors_CS1_5fand_5fCS2_2eproto,
    file_level_service_descriptors_CS1_5fand_5fCS2_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_CS1_5fand_5fCS2_2eproto_getter() {
  return &descriptor_table_CS1_5fand_5fCS2_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_CS1_5fand_5fCS2_2eproto(&descriptor_table_CS1_5fand_5fCS2_2eproto);
namespace CS1_CS2 {

// ===================================================================

class track_Sel::_Internal {
 public:
};

track_Sel::track_Sel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CS1_CS2.track_Sel)
}
track_Sel::track_Sel(const track_Sel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  track_Sel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dis_){}
    , decltype(_impl_.lable_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.dis_, &from._impl_.dis_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.lable_) -
    reinterpret_cast<char*>(&_impl_.dis_)) + sizeof(_impl_.lable_));
  // @@protoc_insertion_point(copy_constructor:CS1_CS2.track_Sel)
}

inline void track_Sel::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dis_){0}
    , decltype(_impl_.lable_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

track_Sel::~track_Sel() {
  // @@protoc_insertion_point(destructor:CS1_CS2.track_Sel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void track_Sel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void track_Sel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void track_Sel::Clear() {
// @@protoc_insertion_point(message_clear_start:CS1_CS2.track_Sel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.dis_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.lable_) -
      reinterpret_cast<char*>(&_impl_.dis_)) + sizeof(_impl_.lable_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* track_Sel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double dis = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.dis_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 lable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.lable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* track_Sel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS1_CS2.track_Sel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double dis = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_dis = this->_internal_dis();
  uint64_t raw_dis;
  memcpy(&raw_dis, &tmp_dis, sizeof(tmp_dis));
  if (raw_dis != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_dis(), target);
  }

  // int32 lable = 2;
  if (this->_internal_lable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_lable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS1_CS2.track_Sel)
  return target;
}

size_t track_Sel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS1_CS2.track_Sel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double dis = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_dis = this->_internal_dis();
  uint64_t raw_dis;
  memcpy(&raw_dis, &tmp_dis, sizeof(tmp_dis));
  if (raw_dis != 0) {
    total_size += 1 + 8;
  }

  // int32 lable = 2;
  if (this->_internal_lable() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_lable());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData track_Sel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    track_Sel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*track_Sel::GetClassData() const { return &_class_data_; }


void track_Sel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<track_Sel*>(&to_msg);
  auto& from = static_cast<const track_Sel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CS1_CS2.track_Sel)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_dis = from._internal_dis();
  uint64_t raw_dis;
  memcpy(&raw_dis, &tmp_dis, sizeof(tmp_dis));
  if (raw_dis != 0) {
    _this->_internal_set_dis(from._internal_dis());
  }
  if (from._internal_lable() != 0) {
    _this->_internal_set_lable(from._internal_lable());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void track_Sel::CopyFrom(const track_Sel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS1_CS2.track_Sel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool track_Sel::IsInitialized() const {
  return true;
}

void track_Sel::InternalSwap(track_Sel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(track_Sel, _impl_.lable_)
      + sizeof(track_Sel::_impl_.lable_)
      - PROTOBUF_FIELD_OFFSET(track_Sel, _impl_.dis_)>(
          reinterpret_cast<char*>(&_impl_.dis_),
          reinterpret_cast<char*>(&other->_impl_.dis_));
}

::PROTOBUF_NAMESPACE_ID::Metadata track_Sel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_CS1_5fand_5fCS2_2eproto_getter, &descriptor_table_CS1_5fand_5fCS2_2eproto_once,
      file_level_metadata_CS1_5fand_5fCS2_2eproto[0]);
}

// ===================================================================

class synDist::_Internal {
 public:
};

synDist::synDist(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CS1_CS2.synDist)
}
synDist::synDist(const synDist& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  synDist* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.dis_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.dis_ = from._impl_.dis_;
  // @@protoc_insertion_point(copy_constructor:CS1_CS2.synDist)
}

inline void synDist::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.dis_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

synDist::~synDist() {
  // @@protoc_insertion_point(destructor:CS1_CS2.synDist)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void synDist::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
}

void synDist::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void synDist::Clear() {
// @@protoc_insertion_point(message_clear_start:CS1_CS2.synDist)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _impl_.dis_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* synDist::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CS1_CS2.synDist.key"));
        } else
          goto handle_unusual;
        continue;
      // double dis = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.dis_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* synDist::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS1_CS2.synDist)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CS1_CS2.synDist.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // double dis = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_dis = this->_internal_dis();
  uint64_t raw_dis;
  memcpy(&raw_dis, &tmp_dis, sizeof(tmp_dis));
  if (raw_dis != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_dis(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS1_CS2.synDist)
  return target;
}

size_t synDist::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS1_CS2.synDist)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // double dis = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_dis = this->_internal_dis();
  uint64_t raw_dis;
  memcpy(&raw_dis, &tmp_dis, sizeof(tmp_dis));
  if (raw_dis != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData synDist::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    synDist::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*synDist::GetClassData() const { return &_class_data_; }


void synDist::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<synDist*>(&to_msg);
  auto& from = static_cast<const synDist&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CS1_CS2.synDist)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_dis = from._internal_dis();
  uint64_t raw_dis;
  memcpy(&raw_dis, &tmp_dis, sizeof(tmp_dis));
  if (raw_dis != 0) {
    _this->_internal_set_dis(from._internal_dis());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void synDist::CopyFrom(const synDist& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS1_CS2.synDist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool synDist::IsInitialized() const {
  return true;
}

void synDist::InternalSwap(synDist* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  swap(_impl_.dis_, other->_impl_.dis_);
}

::PROTOBUF_NAMESPACE_ID::Metadata synDist::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_CS1_5fand_5fCS2_2eproto_getter, &descriptor_table_CS1_5fand_5fCS2_2eproto_once,
      file_level_metadata_CS1_5fand_5fCS2_2eproto[1]);
}

// ===================================================================

class PreResults::_Internal {
 public:
};

PreResults::PreResults(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CS1_CS2.PreResults)
}
PreResults::PreResults(const PreResults& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PreResults* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.esd_){from._impl_.esd_}
    , decltype(_impl_.kid_){from._impl_.kid_}
    , decltype(_impl_.distlist_){from._impl_.distlist_}
    , decltype(_impl_.k_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.k_ = from._impl_.k_;
  // @@protoc_insertion_point(copy_constructor:CS1_CS2.PreResults)
}

inline void PreResults::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.esd_){arena}
    , decltype(_impl_.kid_){arena}
    , decltype(_impl_.distlist_){arena}
    , decltype(_impl_.k_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PreResults::~PreResults() {
  // @@protoc_insertion_point(destructor:CS1_CS2.PreResults)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PreResults::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.esd_.~RepeatedPtrField();
  _impl_.kid_.~RepeatedPtrField();
  _impl_.distlist_.~RepeatedPtrField();
}

void PreResults::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PreResults::Clear() {
// @@protoc_insertion_point(message_clear_start:CS1_CS2.PreResults)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.esd_.Clear();
  _impl_.kid_.Clear();
  _impl_.distlist_.Clear();
  _impl_.k_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PreResults::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 k = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string ESD = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_esd();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "CS1_CS2.PreResults.ESD"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CS1_CS2.track_Sel KID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_kid(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CS1_CS2.synDist distlist = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_distlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PreResults::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS1_CS2.PreResults)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 k = 1;
  if (this->_internal_k() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_k(), target);
  }

  // repeated string ESD = 2;
  for (int i = 0, n = this->_internal_esd_size(); i < n; i++) {
    const auto& s = this->_internal_esd(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CS1_CS2.PreResults.ESD");
    target = stream->WriteString(2, s, target);
  }

  // repeated .CS1_CS2.track_Sel KID = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_kid_size()); i < n; i++) {
    const auto& repfield = this->_internal_kid(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CS1_CS2.synDist distlist = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_distlist_size()); i < n; i++) {
    const auto& repfield = this->_internal_distlist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS1_CS2.PreResults)
  return target;
}

size_t PreResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS1_CS2.PreResults)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ESD = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.esd_.size());
  for (int i = 0, n = _impl_.esd_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.esd_.Get(i));
  }

  // repeated .CS1_CS2.track_Sel KID = 3;
  total_size += 1UL * this->_internal_kid_size();
  for (const auto& msg : this->_impl_.kid_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CS1_CS2.synDist distlist = 4;
  total_size += 1UL * this->_internal_distlist_size();
  for (const auto& msg : this->_impl_.distlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 k = 1;
  if (this->_internal_k() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_k());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PreResults::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PreResults::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PreResults::GetClassData() const { return &_class_data_; }


void PreResults::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PreResults*>(&to_msg);
  auto& from = static_cast<const PreResults&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CS1_CS2.PreResults)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.esd_.MergeFrom(from._impl_.esd_);
  _this->_impl_.kid_.MergeFrom(from._impl_.kid_);
  _this->_impl_.distlist_.MergeFrom(from._impl_.distlist_);
  if (from._internal_k() != 0) {
    _this->_internal_set_k(from._internal_k());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PreResults::CopyFrom(const PreResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS1_CS2.PreResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreResults::IsInitialized() const {
  return true;
}

void PreResults::InternalSwap(PreResults* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.esd_.InternalSwap(&other->_impl_.esd_);
  _impl_.kid_.InternalSwap(&other->_impl_.kid_);
  _impl_.distlist_.InternalSwap(&other->_impl_.distlist_);
  swap(_impl_.k_, other->_impl_.k_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PreResults::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_CS1_5fand_5fCS2_2eproto_getter, &descriptor_table_CS1_5fand_5fCS2_2eproto_once,
      file_level_metadata_CS1_5fand_5fCS2_2eproto[2]);
}

// ===================================================================

class ExactResult::_Internal {
 public:
};

ExactResult::ExactResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CS1_CS2.ExactResult)
}
ExactResult::ExactResult(const ExactResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExactResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.kid_){from._impl_.kid_}
    , decltype(_impl_.mindis_){from._impl_.mindis_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CS1_CS2.ExactResult)
}

inline void ExactResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.kid_){arena}
    , decltype(_impl_.mindis_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ExactResult::~ExactResult() {
  // @@protoc_insertion_point(destructor:CS1_CS2.ExactResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExactResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.kid_.~RepeatedPtrField();
  _impl_.mindis_.~RepeatedField();
}

void ExactResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExactResult::Clear() {
// @@protoc_insertion_point(message_clear_start:CS1_CS2.ExactResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.kid_.Clear();
  _impl_.mindis_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExactResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CS1_CS2.track_Sel kid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_kid(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated double mindis = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_mindis(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 17) {
          _internal_add_mindis(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExactResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS1_CS2.ExactResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CS1_CS2.track_Sel kid = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_kid_size()); i < n; i++) {
    const auto& repfield = this->_internal_kid(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated double mindis = 2;
  if (this->_internal_mindis_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_mindis(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CS1_CS2.ExactResult)
  return target;
}

size_t ExactResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CS1_CS2.ExactResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CS1_CS2.track_Sel kid = 1;
  total_size += 1UL * this->_internal_kid_size();
  for (const auto& msg : this->_impl_.kid_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated double mindis = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_mindis_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExactResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExactResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExactResult::GetClassData() const { return &_class_data_; }


void ExactResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExactResult*>(&to_msg);
  auto& from = static_cast<const ExactResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CS1_CS2.ExactResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.kid_.MergeFrom(from._impl_.kid_);
  _this->_impl_.mindis_.MergeFrom(from._impl_.mindis_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExactResult::CopyFrom(const ExactResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS1_CS2.ExactResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExactResult::IsInitialized() const {
  return true;
}

void ExactResult::InternalSwap(ExactResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.kid_.InternalSwap(&other->_impl_.kid_);
  _impl_.mindis_.InternalSwap(&other->_impl_.mindis_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExactResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_CS1_5fand_5fCS2_2eproto_getter, &descriptor_table_CS1_5fand_5fCS2_2eproto_once,
      file_level_metadata_CS1_5fand_5fCS2_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace CS1_CS2
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CS1_CS2::track_Sel*
Arena::CreateMaybeMessage< ::CS1_CS2::track_Sel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CS1_CS2::track_Sel >(arena);
}
template<> PROTOBUF_NOINLINE ::CS1_CS2::synDist*
Arena::CreateMaybeMessage< ::CS1_CS2::synDist >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CS1_CS2::synDist >(arena);
}
template<> PROTOBUF_NOINLINE ::CS1_CS2::PreResults*
Arena::CreateMaybeMessage< ::CS1_CS2::PreResults >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CS1_CS2::PreResults >(arena);
}
template<> PROTOBUF_NOINLINE ::CS1_CS2::ExactResult*
Arena::CreateMaybeMessage< ::CS1_CS2::ExactResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CS1_CS2::ExactResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
