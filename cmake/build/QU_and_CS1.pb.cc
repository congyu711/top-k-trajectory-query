// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: QU_and_CS1.proto

#include "QU_and_CS1.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace QU_and_CS1 {
PROTOBUF_CONSTEXPR PublicKeyRequest::PublicKeyRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PublicKeyRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublicKeyRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublicKeyRequestDefaultTypeInternal() {}
  union {
    PublicKeyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublicKeyRequestDefaultTypeInternal _PublicKeyRequest_default_instance_;
PROTOBUF_CONSTEXPR QURequest_qu_Enc::QURequest_qu_Enc(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hpoint_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.t_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QURequest_qu_EncDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QURequest_qu_EncDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QURequest_qu_EncDefaultTypeInternal() {}
  union {
    QURequest_qu_Enc _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QURequest_qu_EncDefaultTypeInternal _QURequest_qu_Enc_default_instance_;
PROTOBUF_CONSTEXPR QURequest::QURequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.qu_encs_)*/{}
  , /*decltype(_impl_.k_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QURequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QURequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QURequestDefaultTypeInternal() {}
  union {
    QURequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QURequestDefaultTypeInternal _QURequest_default_instance_;
PROTOBUF_CONSTEXPR PublicKeyReply::PublicKeyReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PublicKeyReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublicKeyReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublicKeyReplyDefaultTypeInternal() {}
  union {
    PublicKeyReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublicKeyReplyDefaultTypeInternal _PublicKeyReply_default_instance_;
PROTOBUF_CONSTEXPR QUReply_Cap::QUReply_Cap(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.e_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.v_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.s_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QUReply_CapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QUReply_CapDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QUReply_CapDefaultTypeInternal() {}
  union {
    QUReply_Cap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QUReply_CapDefaultTypeInternal _QUReply_Cap_default_instance_;
PROTOBUF_CONSTEXPR QUReply_Enc_Result::QUReply_Enc_Result(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.query_result_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QUReply_Enc_ResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QUReply_Enc_ResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QUReply_Enc_ResultDefaultTypeInternal() {}
  union {
    QUReply_Enc_Result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QUReply_Enc_ResultDefaultTypeInternal _QUReply_Enc_Result_default_instance_;
PROTOBUF_CONSTEXPR QUReply::QUReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.kid_)*/{}
  , /*decltype(_impl_.enc_results_)*/{}
  , /*decltype(_impl_.d_)*/{}
  , /*decltype(_impl_.comversionkey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cap_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QUReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QUReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QUReplyDefaultTypeInternal() {}
  union {
    QUReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QUReplyDefaultTypeInternal _QUReply_default_instance_;
}  // namespace QU_and_CS1
static ::_pb::Metadata file_level_metadata_QU_5fand_5fCS1_2eproto[7];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_QU_5fand_5fCS1_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_QU_5fand_5fCS1_2eproto = nullptr;

const uint32_t TableStruct_QU_5fand_5fCS1_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::QU_and_CS1::PublicKeyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::QU_and_CS1::PublicKeyRequest, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::QU_and_CS1::QURequest_qu_Enc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::QU_and_CS1::QURequest_qu_Enc, _impl_.t_),
  PROTOBUF_FIELD_OFFSET(::QU_and_CS1::QURequest_qu_Enc, _impl_.hpoint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::QU_and_CS1::QURequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::QU_and_CS1::QURequest, _impl_.k_),
  PROTOBUF_FIELD_OFFSET(::QU_and_CS1::QURequest, _impl_.qu_encs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::QU_and_CS1::PublicKeyReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::QU_and_CS1::PublicKeyReply, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::QU_and_CS1::QUReply_Cap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::QU_and_CS1::QUReply_Cap, _impl_.e_),
  PROTOBUF_FIELD_OFFSET(::QU_and_CS1::QUReply_Cap, _impl_.v_),
  PROTOBUF_FIELD_OFFSET(::QU_and_CS1::QUReply_Cap, _impl_.s_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::QU_and_CS1::QUReply_Enc_Result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::QU_and_CS1::QUReply_Enc_Result, _impl_.query_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::QU_and_CS1::QUReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::QU_and_CS1::QUReply, _impl_.comversionkey_),
  PROTOBUF_FIELD_OFFSET(::QU_and_CS1::QUReply, _impl_.cap_),
  PROTOBUF_FIELD_OFFSET(::QU_and_CS1::QUReply, _impl_.kid_),
  PROTOBUF_FIELD_OFFSET(::QU_and_CS1::QUReply, _impl_.enc_results_),
  PROTOBUF_FIELD_OFFSET(::QU_and_CS1::QUReply, _impl_.d_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::QU_and_CS1::PublicKeyRequest)},
  { 7, -1, -1, sizeof(::QU_and_CS1::QURequest_qu_Enc)},
  { 15, -1, -1, sizeof(::QU_and_CS1::QURequest)},
  { 23, -1, -1, sizeof(::QU_and_CS1::PublicKeyReply)},
  { 30, -1, -1, sizeof(::QU_and_CS1::QUReply_Cap)},
  { 39, -1, -1, sizeof(::QU_and_CS1::QUReply_Enc_Result)},
  { 46, -1, -1, sizeof(::QU_and_CS1::QUReply)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::QU_and_CS1::_PublicKeyRequest_default_instance_._instance,
  &::QU_and_CS1::_QURequest_qu_Enc_default_instance_._instance,
  &::QU_and_CS1::_QURequest_default_instance_._instance,
  &::QU_and_CS1::_PublicKeyReply_default_instance_._instance,
  &::QU_and_CS1::_QUReply_Cap_default_instance_._instance,
  &::QU_and_CS1::_QUReply_Enc_Result_default_instance_._instance,
  &::QU_and_CS1::_QUReply_default_instance_._instance,
};

const char descriptor_table_protodef_QU_5fand_5fCS1_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020QU_and_CS1.proto\022\nQU_and_CS1\" \n\020Public"
  "KeyRequest\022\014\n\004name\030\001 \001(\t\"j\n\tQURequest\022\t\n"
  "\001k\030\001 \001(\r\022-\n\007qu_Encs\030\004 \003(\0132\034.QU_and_CS1.Q"
  "URequest.qu_Enc\032#\n\006qu_Enc\022\t\n\001t\030\002 \001(\001\022\016\n\006"
  "Hpoint\030\003 \001(\t\"!\n\016PublicKeyReply\022\017\n\007messag"
  "e\030\001 \001(\t\"\375\001\n\007QUReply\022\025\n\rcomversionKey\030\001 \001"
  "(\t\022$\n\003cap\030\002 \001(\0132\027.QU_and_CS1.QUReply.Cap"
  "\022\013\n\003kid\030\003 \003(\t\0223\n\013Enc_Results\030\004 \003(\0132\036.QU_"
  "and_CS1.QUReply.Enc_Result\022\t\n\001D\030\005 \003(\001\032&\n"
  "\003Cap\022\t\n\001E\030\001 \001(\t\022\t\n\001V\030\002 \001(\t\022\t\n\001s\030\003 \001(\t\032@\n"
  "\nEnc_Result\0222\n\014query_result\030\001 \003(\0132\034.QU_a"
  "nd_CS1.QURequest.qu_Enc2\214\001\n\007Greeter\022G\n\tP"
  "ublicKey\022\034.QU_and_CS1.PublicKeyRequest\032\032"
  ".QU_and_CS1.PublicKeyReply\"\000\0228\n\010QUSearch"
  "\022\025.QU_and_CS1.QURequest\032\023.QU_and_CS1.QUR"
  "eply\"\000b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_QU_5fand_5fCS1_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_QU_5fand_5fCS1_2eproto = {
    false, false, 614, descriptor_table_protodef_QU_5fand_5fCS1_2eproto,
    "QU_and_CS1.proto",
    &descriptor_table_QU_5fand_5fCS1_2eproto_once, nullptr, 0, 7,
    schemas, file_default_instances, TableStruct_QU_5fand_5fCS1_2eproto::offsets,
    file_level_metadata_QU_5fand_5fCS1_2eproto, file_level_enum_descriptors_QU_5fand_5fCS1_2eproto,
    file_level_service_descriptors_QU_5fand_5fCS1_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_QU_5fand_5fCS1_2eproto_getter() {
  return &descriptor_table_QU_5fand_5fCS1_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_QU_5fand_5fCS1_2eproto(&descriptor_table_QU_5fand_5fCS1_2eproto);
namespace QU_and_CS1 {

// ===================================================================

class PublicKeyRequest::_Internal {
 public:
};

PublicKeyRequest::PublicKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:QU_and_CS1.PublicKeyRequest)
}
PublicKeyRequest::PublicKeyRequest(const PublicKeyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PublicKeyRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:QU_and_CS1.PublicKeyRequest)
}

inline void PublicKeyRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PublicKeyRequest::~PublicKeyRequest() {
  // @@protoc_insertion_point(destructor:QU_and_CS1.PublicKeyRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PublicKeyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void PublicKeyRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PublicKeyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:QU_and_CS1.PublicKeyRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublicKeyRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "QU_and_CS1.PublicKeyRequest.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PublicKeyRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:QU_and_CS1.PublicKeyRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "QU_and_CS1.PublicKeyRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QU_and_CS1.PublicKeyRequest)
  return target;
}

size_t PublicKeyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:QU_and_CS1.PublicKeyRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PublicKeyRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PublicKeyRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PublicKeyRequest::GetClassData() const { return &_class_data_; }


void PublicKeyRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PublicKeyRequest*>(&to_msg);
  auto& from = static_cast<const PublicKeyRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:QU_and_CS1.PublicKeyRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PublicKeyRequest::CopyFrom(const PublicKeyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:QU_and_CS1.PublicKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublicKeyRequest::IsInitialized() const {
  return true;
}

void PublicKeyRequest::InternalSwap(PublicKeyRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PublicKeyRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_QU_5fand_5fCS1_2eproto_getter, &descriptor_table_QU_5fand_5fCS1_2eproto_once,
      file_level_metadata_QU_5fand_5fCS1_2eproto[0]);
}

// ===================================================================

class QURequest_qu_Enc::_Internal {
 public:
};

QURequest_qu_Enc::QURequest_qu_Enc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:QU_and_CS1.QURequest.qu_Enc)
}
QURequest_qu_Enc::QURequest_qu_Enc(const QURequest_qu_Enc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QURequest_qu_Enc* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hpoint_){}
    , decltype(_impl_.t_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.hpoint_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hpoint_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hpoint().empty()) {
    _this->_impl_.hpoint_.Set(from._internal_hpoint(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.t_ = from._impl_.t_;
  // @@protoc_insertion_point(copy_constructor:QU_and_CS1.QURequest.qu_Enc)
}

inline void QURequest_qu_Enc::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hpoint_){}
    , decltype(_impl_.t_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.hpoint_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hpoint_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QURequest_qu_Enc::~QURequest_qu_Enc() {
  // @@protoc_insertion_point(destructor:QU_and_CS1.QURequest.qu_Enc)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QURequest_qu_Enc::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hpoint_.Destroy();
}

void QURequest_qu_Enc::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QURequest_qu_Enc::Clear() {
// @@protoc_insertion_point(message_clear_start:QU_and_CS1.QURequest.qu_Enc)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hpoint_.ClearToEmpty();
  _impl_.t_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QURequest_qu_Enc::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double t = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.t_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string Hpoint = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_hpoint();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "QU_and_CS1.QURequest.qu_Enc.Hpoint"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QURequest_qu_Enc::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:QU_and_CS1.QURequest.qu_Enc)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double t = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_t = this->_internal_t();
  uint64_t raw_t;
  memcpy(&raw_t, &tmp_t, sizeof(tmp_t));
  if (raw_t != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_t(), target);
  }

  // string Hpoint = 3;
  if (!this->_internal_hpoint().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hpoint().data(), static_cast<int>(this->_internal_hpoint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "QU_and_CS1.QURequest.qu_Enc.Hpoint");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_hpoint(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QU_and_CS1.QURequest.qu_Enc)
  return target;
}

size_t QURequest_qu_Enc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:QU_and_CS1.QURequest.qu_Enc)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Hpoint = 3;
  if (!this->_internal_hpoint().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hpoint());
  }

  // double t = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_t = this->_internal_t();
  uint64_t raw_t;
  memcpy(&raw_t, &tmp_t, sizeof(tmp_t));
  if (raw_t != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QURequest_qu_Enc::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QURequest_qu_Enc::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QURequest_qu_Enc::GetClassData() const { return &_class_data_; }


void QURequest_qu_Enc::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QURequest_qu_Enc*>(&to_msg);
  auto& from = static_cast<const QURequest_qu_Enc&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:QU_and_CS1.QURequest.qu_Enc)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_hpoint().empty()) {
    _this->_internal_set_hpoint(from._internal_hpoint());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_t = from._internal_t();
  uint64_t raw_t;
  memcpy(&raw_t, &tmp_t, sizeof(tmp_t));
  if (raw_t != 0) {
    _this->_internal_set_t(from._internal_t());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QURequest_qu_Enc::CopyFrom(const QURequest_qu_Enc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:QU_and_CS1.QURequest.qu_Enc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QURequest_qu_Enc::IsInitialized() const {
  return true;
}

void QURequest_qu_Enc::InternalSwap(QURequest_qu_Enc* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hpoint_, lhs_arena,
      &other->_impl_.hpoint_, rhs_arena
  );
  swap(_impl_.t_, other->_impl_.t_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QURequest_qu_Enc::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_QU_5fand_5fCS1_2eproto_getter, &descriptor_table_QU_5fand_5fCS1_2eproto_once,
      file_level_metadata_QU_5fand_5fCS1_2eproto[1]);
}

// ===================================================================

class QURequest::_Internal {
 public:
};

QURequest::QURequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:QU_and_CS1.QURequest)
}
QURequest::QURequest(const QURequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QURequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.qu_encs_){from._impl_.qu_encs_}
    , decltype(_impl_.k_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.k_ = from._impl_.k_;
  // @@protoc_insertion_point(copy_constructor:QU_and_CS1.QURequest)
}

inline void QURequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.qu_encs_){arena}
    , decltype(_impl_.k_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QURequest::~QURequest() {
  // @@protoc_insertion_point(destructor:QU_and_CS1.QURequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QURequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.qu_encs_.~RepeatedPtrField();
}

void QURequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QURequest::Clear() {
// @@protoc_insertion_point(message_clear_start:QU_and_CS1.QURequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.qu_encs_.Clear();
  _impl_.k_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QURequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 k = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .QU_and_CS1.QURequest.qu_Enc qu_Encs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_qu_encs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QURequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:QU_and_CS1.QURequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 k = 1;
  if (this->_internal_k() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_k(), target);
  }

  // repeated .QU_and_CS1.QURequest.qu_Enc qu_Encs = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_qu_encs_size()); i < n; i++) {
    const auto& repfield = this->_internal_qu_encs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QU_and_CS1.QURequest)
  return target;
}

size_t QURequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:QU_and_CS1.QURequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .QU_and_CS1.QURequest.qu_Enc qu_Encs = 4;
  total_size += 1UL * this->_internal_qu_encs_size();
  for (const auto& msg : this->_impl_.qu_encs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 k = 1;
  if (this->_internal_k() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_k());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QURequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QURequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QURequest::GetClassData() const { return &_class_data_; }


void QURequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QURequest*>(&to_msg);
  auto& from = static_cast<const QURequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:QU_and_CS1.QURequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.qu_encs_.MergeFrom(from._impl_.qu_encs_);
  if (from._internal_k() != 0) {
    _this->_internal_set_k(from._internal_k());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QURequest::CopyFrom(const QURequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:QU_and_CS1.QURequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QURequest::IsInitialized() const {
  return true;
}

void QURequest::InternalSwap(QURequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.qu_encs_.InternalSwap(&other->_impl_.qu_encs_);
  swap(_impl_.k_, other->_impl_.k_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QURequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_QU_5fand_5fCS1_2eproto_getter, &descriptor_table_QU_5fand_5fCS1_2eproto_once,
      file_level_metadata_QU_5fand_5fCS1_2eproto[2]);
}

// ===================================================================

class PublicKeyReply::_Internal {
 public:
};

PublicKeyReply::PublicKeyReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:QU_and_CS1.PublicKeyReply)
}
PublicKeyReply::PublicKeyReply(const PublicKeyReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PublicKeyReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:QU_and_CS1.PublicKeyReply)
}

inline void PublicKeyReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PublicKeyReply::~PublicKeyReply() {
  // @@protoc_insertion_point(destructor:QU_and_CS1.PublicKeyReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PublicKeyReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void PublicKeyReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PublicKeyReply::Clear() {
// @@protoc_insertion_point(message_clear_start:QU_and_CS1.PublicKeyReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublicKeyReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "QU_and_CS1.PublicKeyReply.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PublicKeyReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:QU_and_CS1.PublicKeyReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "QU_and_CS1.PublicKeyReply.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QU_and_CS1.PublicKeyReply)
  return target;
}

size_t PublicKeyReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:QU_and_CS1.PublicKeyReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PublicKeyReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PublicKeyReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PublicKeyReply::GetClassData() const { return &_class_data_; }


void PublicKeyReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PublicKeyReply*>(&to_msg);
  auto& from = static_cast<const PublicKeyReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:QU_and_CS1.PublicKeyReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PublicKeyReply::CopyFrom(const PublicKeyReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:QU_and_CS1.PublicKeyReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublicKeyReply::IsInitialized() const {
  return true;
}

void PublicKeyReply::InternalSwap(PublicKeyReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PublicKeyReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_QU_5fand_5fCS1_2eproto_getter, &descriptor_table_QU_5fand_5fCS1_2eproto_once,
      file_level_metadata_QU_5fand_5fCS1_2eproto[3]);
}

// ===================================================================

class QUReply_Cap::_Internal {
 public:
};

QUReply_Cap::QUReply_Cap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:QU_and_CS1.QUReply.Cap)
}
QUReply_Cap::QUReply_Cap(const QUReply_Cap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QUReply_Cap* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.e_){}
    , decltype(_impl_.v_){}
    , decltype(_impl_.s_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.e_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.e_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_e().empty()) {
    _this->_impl_.e_.Set(from._internal_e(), 
      _this->GetArenaForAllocation());
  }
  _impl_.v_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.v_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_v().empty()) {
    _this->_impl_.v_.Set(from._internal_v(), 
      _this->GetArenaForAllocation());
  }
  _impl_.s_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.s_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_s().empty()) {
    _this->_impl_.s_.Set(from._internal_s(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:QU_and_CS1.QUReply.Cap)
}

inline void QUReply_Cap::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.e_){}
    , decltype(_impl_.v_){}
    , decltype(_impl_.s_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.e_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.e_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.v_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.v_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.s_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.s_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QUReply_Cap::~QUReply_Cap() {
  // @@protoc_insertion_point(destructor:QU_and_CS1.QUReply.Cap)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QUReply_Cap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.e_.Destroy();
  _impl_.v_.Destroy();
  _impl_.s_.Destroy();
}

void QUReply_Cap::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QUReply_Cap::Clear() {
// @@protoc_insertion_point(message_clear_start:QU_and_CS1.QUReply.Cap)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.e_.ClearToEmpty();
  _impl_.v_.ClearToEmpty();
  _impl_.s_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QUReply_Cap::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string E = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_e();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "QU_and_CS1.QUReply.Cap.E"));
        } else
          goto handle_unusual;
        continue;
      // string V = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_v();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "QU_and_CS1.QUReply.Cap.V"));
        } else
          goto handle_unusual;
        continue;
      // string s = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_s();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "QU_and_CS1.QUReply.Cap.s"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QUReply_Cap::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:QU_and_CS1.QUReply.Cap)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string E = 1;
  if (!this->_internal_e().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_e().data(), static_cast<int>(this->_internal_e().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "QU_and_CS1.QUReply.Cap.E");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_e(), target);
  }

  // string V = 2;
  if (!this->_internal_v().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_v().data(), static_cast<int>(this->_internal_v().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "QU_and_CS1.QUReply.Cap.V");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_v(), target);
  }

  // string s = 3;
  if (!this->_internal_s().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_s().data(), static_cast<int>(this->_internal_s().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "QU_and_CS1.QUReply.Cap.s");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QU_and_CS1.QUReply.Cap)
  return target;
}

size_t QUReply_Cap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:QU_and_CS1.QUReply.Cap)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string E = 1;
  if (!this->_internal_e().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_e());
  }

  // string V = 2;
  if (!this->_internal_v().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_v());
  }

  // string s = 3;
  if (!this->_internal_s().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_s());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QUReply_Cap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QUReply_Cap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QUReply_Cap::GetClassData() const { return &_class_data_; }


void QUReply_Cap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QUReply_Cap*>(&to_msg);
  auto& from = static_cast<const QUReply_Cap&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:QU_and_CS1.QUReply.Cap)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_e().empty()) {
    _this->_internal_set_e(from._internal_e());
  }
  if (!from._internal_v().empty()) {
    _this->_internal_set_v(from._internal_v());
  }
  if (!from._internal_s().empty()) {
    _this->_internal_set_s(from._internal_s());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QUReply_Cap::CopyFrom(const QUReply_Cap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:QU_and_CS1.QUReply.Cap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QUReply_Cap::IsInitialized() const {
  return true;
}

void QUReply_Cap::InternalSwap(QUReply_Cap* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.e_, lhs_arena,
      &other->_impl_.e_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.v_, lhs_arena,
      &other->_impl_.v_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.s_, lhs_arena,
      &other->_impl_.s_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata QUReply_Cap::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_QU_5fand_5fCS1_2eproto_getter, &descriptor_table_QU_5fand_5fCS1_2eproto_once,
      file_level_metadata_QU_5fand_5fCS1_2eproto[4]);
}

// ===================================================================

class QUReply_Enc_Result::_Internal {
 public:
};

QUReply_Enc_Result::QUReply_Enc_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:QU_and_CS1.QUReply.Enc_Result)
}
QUReply_Enc_Result::QUReply_Enc_Result(const QUReply_Enc_Result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QUReply_Enc_Result* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.query_result_){from._impl_.query_result_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:QU_and_CS1.QUReply.Enc_Result)
}

inline void QUReply_Enc_Result::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.query_result_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QUReply_Enc_Result::~QUReply_Enc_Result() {
  // @@protoc_insertion_point(destructor:QU_and_CS1.QUReply.Enc_Result)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QUReply_Enc_Result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.query_result_.~RepeatedPtrField();
}

void QUReply_Enc_Result::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QUReply_Enc_Result::Clear() {
// @@protoc_insertion_point(message_clear_start:QU_and_CS1.QUReply.Enc_Result)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.query_result_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QUReply_Enc_Result::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .QU_and_CS1.QURequest.qu_Enc query_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_query_result(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QUReply_Enc_Result::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:QU_and_CS1.QUReply.Enc_Result)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .QU_and_CS1.QURequest.qu_Enc query_result = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_query_result_size()); i < n; i++) {
    const auto& repfield = this->_internal_query_result(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QU_and_CS1.QUReply.Enc_Result)
  return target;
}

size_t QUReply_Enc_Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:QU_and_CS1.QUReply.Enc_Result)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .QU_and_CS1.QURequest.qu_Enc query_result = 1;
  total_size += 1UL * this->_internal_query_result_size();
  for (const auto& msg : this->_impl_.query_result_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QUReply_Enc_Result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QUReply_Enc_Result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QUReply_Enc_Result::GetClassData() const { return &_class_data_; }


void QUReply_Enc_Result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QUReply_Enc_Result*>(&to_msg);
  auto& from = static_cast<const QUReply_Enc_Result&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:QU_and_CS1.QUReply.Enc_Result)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.query_result_.MergeFrom(from._impl_.query_result_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QUReply_Enc_Result::CopyFrom(const QUReply_Enc_Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:QU_and_CS1.QUReply.Enc_Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QUReply_Enc_Result::IsInitialized() const {
  return true;
}

void QUReply_Enc_Result::InternalSwap(QUReply_Enc_Result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.query_result_.InternalSwap(&other->_impl_.query_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QUReply_Enc_Result::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_QU_5fand_5fCS1_2eproto_getter, &descriptor_table_QU_5fand_5fCS1_2eproto_once,
      file_level_metadata_QU_5fand_5fCS1_2eproto[5]);
}

// ===================================================================

class QUReply::_Internal {
 public:
  static const ::QU_and_CS1::QUReply_Cap& cap(const QUReply* msg);
};

const ::QU_and_CS1::QUReply_Cap&
QUReply::_Internal::cap(const QUReply* msg) {
  return *msg->_impl_.cap_;
}
QUReply::QUReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:QU_and_CS1.QUReply)
}
QUReply::QUReply(const QUReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QUReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.kid_){from._impl_.kid_}
    , decltype(_impl_.enc_results_){from._impl_.enc_results_}
    , decltype(_impl_.d_){from._impl_.d_}
    , decltype(_impl_.comversionkey_){}
    , decltype(_impl_.cap_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.comversionkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comversionkey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_comversionkey().empty()) {
    _this->_impl_.comversionkey_.Set(from._internal_comversionkey(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_cap()) {
    _this->_impl_.cap_ = new ::QU_and_CS1::QUReply_Cap(*from._impl_.cap_);
  }
  // @@protoc_insertion_point(copy_constructor:QU_and_CS1.QUReply)
}

inline void QUReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.kid_){arena}
    , decltype(_impl_.enc_results_){arena}
    , decltype(_impl_.d_){arena}
    , decltype(_impl_.comversionkey_){}
    , decltype(_impl_.cap_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.comversionkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comversionkey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QUReply::~QUReply() {
  // @@protoc_insertion_point(destructor:QU_and_CS1.QUReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QUReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.kid_.~RepeatedPtrField();
  _impl_.enc_results_.~RepeatedPtrField();
  _impl_.d_.~RepeatedField();
  _impl_.comversionkey_.Destroy();
  if (this != internal_default_instance()) delete _impl_.cap_;
}

void QUReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QUReply::Clear() {
// @@protoc_insertion_point(message_clear_start:QU_and_CS1.QUReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.kid_.Clear();
  _impl_.enc_results_.Clear();
  _impl_.d_.Clear();
  _impl_.comversionkey_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.cap_ != nullptr) {
    delete _impl_.cap_;
  }
  _impl_.cap_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QUReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string comversionKey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_comversionkey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "QU_and_CS1.QUReply.comversionKey"));
        } else
          goto handle_unusual;
        continue;
      // .QU_and_CS1.QUReply.Cap cap = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cap(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string kid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_kid();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "QU_and_CS1.QUReply.kid"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .QU_and_CS1.QUReply.Enc_Result Enc_Results = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_enc_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated double D = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_d(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 41) {
          _internal_add_d(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QUReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:QU_and_CS1.QUReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string comversionKey = 1;
  if (!this->_internal_comversionkey().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_comversionkey().data(), static_cast<int>(this->_internal_comversionkey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "QU_and_CS1.QUReply.comversionKey");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_comversionkey(), target);
  }

  // .QU_and_CS1.QUReply.Cap cap = 2;
  if (this->_internal_has_cap()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::cap(this),
        _Internal::cap(this).GetCachedSize(), target, stream);
  }

  // repeated string kid = 3;
  for (int i = 0, n = this->_internal_kid_size(); i < n; i++) {
    const auto& s = this->_internal_kid(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "QU_and_CS1.QUReply.kid");
    target = stream->WriteString(3, s, target);
  }

  // repeated .QU_and_CS1.QUReply.Enc_Result Enc_Results = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_enc_results_size()); i < n; i++) {
    const auto& repfield = this->_internal_enc_results(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated double D = 5;
  if (this->_internal_d_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_d(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QU_and_CS1.QUReply)
  return target;
}

size_t QUReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:QU_and_CS1.QUReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string kid = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.kid_.size());
  for (int i = 0, n = _impl_.kid_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.kid_.Get(i));
  }

  // repeated .QU_and_CS1.QUReply.Enc_Result Enc_Results = 4;
  total_size += 1UL * this->_internal_enc_results_size();
  for (const auto& msg : this->_impl_.enc_results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated double D = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_d_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // string comversionKey = 1;
  if (!this->_internal_comversionkey().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_comversionkey());
  }

  // .QU_and_CS1.QUReply.Cap cap = 2;
  if (this->_internal_has_cap()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cap_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QUReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QUReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QUReply::GetClassData() const { return &_class_data_; }


void QUReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QUReply*>(&to_msg);
  auto& from = static_cast<const QUReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:QU_and_CS1.QUReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.kid_.MergeFrom(from._impl_.kid_);
  _this->_impl_.enc_results_.MergeFrom(from._impl_.enc_results_);
  _this->_impl_.d_.MergeFrom(from._impl_.d_);
  if (!from._internal_comversionkey().empty()) {
    _this->_internal_set_comversionkey(from._internal_comversionkey());
  }
  if (from._internal_has_cap()) {
    _this->_internal_mutable_cap()->::QU_and_CS1::QUReply_Cap::MergeFrom(
        from._internal_cap());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QUReply::CopyFrom(const QUReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:QU_and_CS1.QUReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QUReply::IsInitialized() const {
  return true;
}

void QUReply::InternalSwap(QUReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.kid_.InternalSwap(&other->_impl_.kid_);
  _impl_.enc_results_.InternalSwap(&other->_impl_.enc_results_);
  _impl_.d_.InternalSwap(&other->_impl_.d_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.comversionkey_, lhs_arena,
      &other->_impl_.comversionkey_, rhs_arena
  );
  swap(_impl_.cap_, other->_impl_.cap_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QUReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_QU_5fand_5fCS1_2eproto_getter, &descriptor_table_QU_5fand_5fCS1_2eproto_once,
      file_level_metadata_QU_5fand_5fCS1_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace QU_and_CS1
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::QU_and_CS1::PublicKeyRequest*
Arena::CreateMaybeMessage< ::QU_and_CS1::PublicKeyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::QU_and_CS1::PublicKeyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::QU_and_CS1::QURequest_qu_Enc*
Arena::CreateMaybeMessage< ::QU_and_CS1::QURequest_qu_Enc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::QU_and_CS1::QURequest_qu_Enc >(arena);
}
template<> PROTOBUF_NOINLINE ::QU_and_CS1::QURequest*
Arena::CreateMaybeMessage< ::QU_and_CS1::QURequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::QU_and_CS1::QURequest >(arena);
}
template<> PROTOBUF_NOINLINE ::QU_and_CS1::PublicKeyReply*
Arena::CreateMaybeMessage< ::QU_and_CS1::PublicKeyReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::QU_and_CS1::PublicKeyReply >(arena);
}
template<> PROTOBUF_NOINLINE ::QU_and_CS1::QUReply_Cap*
Arena::CreateMaybeMessage< ::QU_and_CS1::QUReply_Cap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::QU_and_CS1::QUReply_Cap >(arena);
}
template<> PROTOBUF_NOINLINE ::QU_and_CS1::QUReply_Enc_Result*
Arena::CreateMaybeMessage< ::QU_and_CS1::QUReply_Enc_Result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::QU_and_CS1::QUReply_Enc_Result >(arena);
}
template<> PROTOBUF_NOINLINE ::QU_and_CS1::QUReply*
Arena::CreateMaybeMessage< ::QU_and_CS1::QUReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::QU_and_CS1::QUReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
